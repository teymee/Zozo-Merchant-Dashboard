{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Downloads/Gigs/Zozo/Merchant dashboard/merchant dashboard/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/HP/Downloads/Gigs/Zozo/Merchant dashboard/merchant dashboard/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(createBidEvent),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(adminFetchBidEvent),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(approveBidEvent),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport axios from \"axios\";\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { API, whoami } from \"../API/Api\";\nimport { actionAdminFetchAuctionsSuccess, actionApproveEventSuccess, actionCreateBidEventSuccess, actionTypes } from \"./action\";\nvar config = {\n  headers: {\n    Authorization: \"Bearer \" + API.TOKEN\n  }\n}; // const whoami = async () => {\n// \tconst url = API.BASE_URL+\"/whoami\";\n// \tconsole.log(API.TOKEN)\n// \tconst config = {\n// \t\theaders: {\n// \t\t\tAuthorization: \"Bearer \" + API.TOKEN,\n// \t\t},\n// \t};\n// \tconst data = await axios.get(url, config).then((res) => {\n// \t\treturn res.data;\n// \t});\n// \treturn data;\n// };\n//POST CREAT BID EVENT\n\nvar sagaCreateBidEvent = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n    var url, config, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"saga func\");\n            url = API.MERCHANT_MERCHANT_BASE_URL + \"/bidding\";\n            config = {\n              headers: {\n                Authorization: \"Bearer \" + API.TOKEN\n              }\n            };\n            data = axios.post(url, event, config).then(function (response) {\n              console.log(response.data);\n              return response.data;\n            });\n            return _context.abrupt(\"return\", data);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function sagaCreateBidEvent(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); //GET MERCHANT BIDDING EVENT\n\n\nvar sagaAdminFetchBidEvent = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(status) {\n    var data, merchant, user, url, _url, _url2, eventStatus;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            whoami;\n            _context2.next = 3;\n            return whoami(API.TOKEN);\n\n          case 3:\n            merchant = _context2.sent;\n            user = merchant.merchant.id;\n\n            if (status === \"pending\") {\n              url = API.MERCHANT_BASE_URL + \"/bidding/\" + user;\n              console.log(status);\n              data = axios.get(url, config).then(function (response) {\n                var pendingBids = response.data.bidding_event.filter(function (bid) {\n                  return bid.approved === false;\n                });\n                return pendingBids;\n              });\n            } else if (status === \"approved\") {\n              _url = API.MERCHANT_BASE_URL + \"/bidding/\" + user;\n              console.log(status);\n              data = axios.get(_url, config).then(function (response) {\n                console.log(response.data.bidding_event);\n                var approvedBids = response.data.bidding_event.filter(function (bid) {\n                  return bid.approved === true;\n                });\n                return approvedBids;\n              });\n            } else {\n              _url2 = API.MERCHANT_BASE_URL + \"/bidding/status\";\n              eventStatus = {\n                status: status\n              };\n              console.log(eventStatus);\n              data = axios.post(_url2, eventStatus, config).then(function (response) {\n                console.log(response.data);\n                return response.data.bidding_event;\n              });\n            }\n\n            return _context2.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function sagaAdminFetchBidEvent(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar sagaApproveBidEvent = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event_id) {\n    var url, config, data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            console.log(\"saga func\");\n            url = API.MERCHANT_BASE_URL + \"/bidding/approve/\" + event_id;\n            config = {\n              headers: {\n                Authorization: \"Bearer \" + API.TOKEN\n              }\n            };\n            console.log(url);\n            data = axios.post(url, event_id, config).then(function (response) {\n              console.log(response.data);\n              return response.data;\n            });\n            return _context3.abrupt(\"return\", data);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function sagaApproveBidEvent(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nfunction createBidEvent(payload) {\n  var isEventAdded;\n  return _regeneratorRuntime.wrap(function createBidEvent$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(sagaCreateBidEvent, payload.event);\n\n        case 3:\n          isEventAdded = _context4.sent;\n          _context4.next = 6;\n          return put(actionCreateBidEventSuccess(isEventAdded));\n\n        case 6:\n          _context4.next = 11;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(_context4.t0);\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction adminFetchBidEvent(payload) {\n  var getAllBidEvent;\n  return _regeneratorRuntime.wrap(function adminFetchBidEvent$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(sagaAdminFetchBidEvent, payload.status);\n\n        case 3:\n          getAllBidEvent = _context5.sent;\n          console.log(getAllBidEvent);\n          _context5.next = 7;\n          return put(actionAdminFetchAuctionsSuccess(getAllBidEvent));\n\n        case 7:\n          _context5.next = 12;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.log(_context5.t0);\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nfunction approveBidEvent(payload) {\n  var isApproved;\n  return _regeneratorRuntime.wrap(function approveBidEvent$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(sagaApproveBidEvent, payload.event_id);\n\n        case 3:\n          isApproved = _context6.sent;\n          console.log(isApproved);\n          _context6.next = 7;\n          return put(actionApproveEventSuccess(isApproved));\n\n        case 7:\n          _context6.next = 12;\n          break;\n\n        case 9:\n          _context6.prev = 9;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.log(_context6.t0);\n\n        case 12:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([takeEvery(actionTypes.CREATE_BID_EVENT, createBidEvent)]);\n\n        case 2:\n          _context7.next = 4;\n          return all([takeEvery(actionTypes.ADMIN_FETCH_BID_EVENTS, adminFetchBidEvent)]);\n\n        case 4:\n          _context7.next = 6;\n          return all([takeEvery(actionTypes.APPROVE_BID_EVENT, approveBidEvent)]);\n\n        case 6:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/Merchant dashboard/merchant dashboard/store/bid/saga.js"],"names":["createBidEvent","adminFetchBidEvent","approveBidEvent","rootSaga","axios","all","call","put","takeEvery","API","whoami","actionAdminFetchAuctionsSuccess","actionApproveEventSuccess","actionCreateBidEventSuccess","actionTypes","config","headers","Authorization","TOKEN","sagaCreateBidEvent","event","console","log","url","MERCHANT_MERCHANT_BASE_URL","data","post","then","response","sagaAdminFetchBidEvent","status","merchant","user","id","MERCHANT_BASE_URL","get","pendingBids","bidding_event","filter","bid","approved","approvedBids","eventStatus","sagaApproveBidEvent","event_id","payload","isEventAdded","getAllBidEvent","isApproved","CREATE_BID_EVENT","ADMIN_FETCH_BID_EVENTS","APPROVE_BID_EVENT"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { API, whoami } from \"../API/Api\";\r\nimport {\r\n\tactionAdminFetchAuctionsSuccess,\r\n\tactionApproveEventSuccess,\r\n\tactionCreateBidEventSuccess,\r\n\tactionTypes,\r\n} from \"./action\";\r\n\r\nconst config = {\r\n\theaders: {\r\n\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t},\r\n};\r\n\r\n// const whoami = async () => {\r\n// \tconst url = API.BASE_URL+\"/whoami\";\r\n// \tconsole.log(API.TOKEN)\r\n// \tconst config = {\r\n// \t\theaders: {\r\n// \t\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n// \t\t},\r\n// \t};\r\n// \tconst data = await axios.get(url, config).then((res) => {\r\n// \t\treturn res.data;\r\n// \t});\r\n\r\n// \treturn data;\r\n// };\r\n\r\n//POST CREAT BID EVENT\r\nconst sagaCreateBidEvent = async (event) => {\r\n\tconsole.log(\"saga func\");\r\n\tconst url = API.MERCHANT_MERCHANT_BASE_URL + \"/bidding\";\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\tconst data = axios.post(url, event, config).then((response) => {\r\n\t\tconsole.log(response.data);\r\n\t\treturn response.data;\r\n\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n//GET MERCHANT BIDDING EVENT\r\nconst sagaAdminFetchBidEvent = async (status) => {\r\n\tlet data;\r\n\twhoami\r\n\tconst merchant = await whoami(API.TOKEN);\r\n\tconst user =  merchant.merchant.id\r\n\tif (status === \"pending\") {\r\n\t\tconst url = API.MERCHANT_BASE_URL + \"/bidding/\"+user;\r\n\r\n\t\tconsole.log(status);\r\n\t\tdata = axios.get(url, config).then((response) => {\r\n\t\t\tconst pendingBids = response.data.bidding_event.filter((bid) => {\r\n\t\t\t\treturn bid.approved === false;\r\n\t\t\t});\r\n\t\t\treturn pendingBids;\r\n\t\t});\r\n\t} else if (status === \"approved\") {\r\n\t\tconst url = API.MERCHANT_BASE_URL + \"/bidding/\"+user;\r\n\r\n\t\tconsole.log(status);\r\n\t\tdata = axios.get(url, config).then((response) => {\r\n\t\t\tconsole.log(response.data.bidding_event)\r\n\t\t\tconst approvedBids = response.data.bidding_event.filter((bid) => {\r\n\t\t\t\treturn bid.approved === true;\r\n\t\t\t});\r\n\t\t\treturn approvedBids;\r\n\t\t});\r\n\t} else {\r\n\t\tconst url = API.MERCHANT_BASE_URL + \"/bidding/status\";\r\n\r\n\t\tconst eventStatus = {\r\n\t\t\tstatus,\t\r\n\t\t};\r\n\r\n\t\tconsole.log(eventStatus);\r\n\t\tdata = axios.post(url, eventStatus, config).then((response) => {\r\n\t\t\tconsole.log(response.data);\r\n\t\t\treturn response.data.bidding_event;\r\n\t\t});\r\n\t}\r\n\r\n\treturn data;\r\n};\r\n\r\nconst sagaApproveBidEvent = async (event_id) => {\r\n\tconsole.log(\"saga func\");\r\n\tconst url = API.MERCHANT_BASE_URL + \"/bidding/approve/\" + event_id;\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\tconsole.log(url);\r\n\tconst data = axios.post(url, event_id, config).then((response) => {\r\n\t\tconsole.log(response.data);\r\n\t\treturn response.data;\r\n\t});\r\n\r\n\treturn data;\r\n};\r\n\r\nfunction* createBidEvent(payload) {\r\n\ttry {\r\n\t\tconst isEventAdded = yield call(sagaCreateBidEvent, payload.event);\r\n\t\tyield put(actionCreateBidEventSuccess(isEventAdded));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* adminFetchBidEvent(payload) {\r\n\ttry {\r\n\t\tconst getAllBidEvent = yield call(sagaAdminFetchBidEvent, payload.status);\r\n\t\tconsole.log(getAllBidEvent)\r\n\t\tyield put(actionAdminFetchAuctionsSuccess(getAllBidEvent));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* approveBidEvent(payload) {\r\n\ttry {\r\n\t\tconst isApproved = yield call(sagaApproveBidEvent, payload.event_id);\r\n\t\tconsole.log(isApproved);\r\n\t\tyield put(actionApproveEventSuccess(isApproved));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.CREATE_BID_EVENT, createBidEvent)]);\r\n\tyield all([\r\n\t\ttakeEvery(actionTypes.ADMIN_FETCH_BID_EVENTS, adminFetchBidEvent),\r\n\t]);\r\n\tyield all([takeEvery(actionTypes.APPROVE_BID_EVENT, approveBidEvent)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}