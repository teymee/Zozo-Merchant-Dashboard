{"ast":null,"code":"import { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { notification } from \"antd\";\nimport { actionTypes, actionGetAllMechants, actionSuccessGetAllMechants, actionSuccessVerifyMechant, actionSuccessGetSingleMechant } from \"./action\";\nimport axios from \"axios\";\nimport { API } from \"../API/Api\"; // NEW\n\nconst config = {\n  headers: {\n    Authorization: \"Bearer\" + API.TOKEN\n  }\n}; //FETCH ALL MERCHANTS\n\nconst sagaFetchMerchants = async () => {\n  const url = API.ADMIN_BASE_URL + \"/merchant\";\n  const data = await axios.get(url, config).then(response => {\n    return response.data.merchant;\n  }).catch(err => {\n    console.log(err + \"fetching merchants\");\n  });\n  return data;\n}; //FETCH SINGLE MERCHANT\n\n\nconst sagaFetchSingleMerchant = async merchant_id => {\n  const url = API.ADMIN_BASE_URL + \"/merchant/\" + merchant_id;\n  const data = await axios.get(url, config).then(response => {\n    return response.data.merchant;\n  }).catch(err => {\n    console.log(err + \"fetching single merchant\");\n  });\n  return data;\n}; //VERIFY ALL ACCOUNT\n\n\nconst sagaVerifyMerchant = async id => {\n  const url = API.ADMIN_BASE_URL + \"/account/verify\";\n  const user = {\n    account_id: id.toString()\n  };\n  console.log(merchant);\n  const data = await axios.post(url, user, config).then(response => {\n    console.log(response.data);\n    return response.data;\n  }).catch(err => {\n    console.log(err + \"Verify Merchant\");\n  });\n  return data;\n}; //UPGRADE  MERCHANT\n\n\nconst sagaUpgradeMerchant = async merchant_id => {\n  const url = API.ADMIN_BASE_URL + \"/admin/upgrade\";\n  const merchant = {\n    account_id: merchant_id.toString()\n  };\n  const data = await axios.post(url, merchant, config).then(response => {\n    console.log(response.data);\n    return response.data;\n  });\n  return data;\n}; // function* postCategory(payload) {\n// \ttry {\n// \t\tconst isCateAdded = yield call(sagaAddCategory, payload.category);\n// \t\tyield put(addCategorySuccess(isCateAdded));\n// \t} catch (err) {\n// \t\tconsole.log(err);\n// \t}\n// }\n\n\nfunction* getAllMechants() {\n  try {\n    const merchants = yield call(sagaFetchMerchants);\n    yield put(actionSuccessGetAllMechants(merchants));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getSingleMechant(merchant_id) {\n  try {\n    const merchant = yield call(sagaFetchSingleMerchant, payloadmerchant_id);\n    yield put(actionSuccessGetSingleMechant(merchant));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* verifyMerchant(payload) {\n  try {\n    const merchants = yield call(sagaVerifyMerchant, payload.merchant_id);\n    yield put(actionSuccessVerifyMechant(merchants));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* upgradeMerchant(payload) {\n  try {\n    const isUpgraded = yield call(sagaUpgradeMerchant, payload.merchant_id);\n    yield put(actionUpgradeMerchantSuccess(isUpgraded));\n  } catch (err) {\n    console.log(err);\n  }\n} // function* deleteCategory(payload) {\n// \ttry {\n// \t\tconst isDeleted = yield call(sagaDeleteCategories, payload.id);\n// \t\tyield put(deleteCategorySuccess(isDeleted));\n// \t} catch (err) {\n// \t\tconsole.log(err);\n// \t}\n// }\n\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.GET_ALL_MERCHANTS, getAllMechants)]);\n  yield all([takeEvery(actionTypes.GET_SINGLE_MERCHANT, getSingleMechant)]);\n  yield all([takeEvery(actionTypes.VERIFY_MERCHANT, verifyMerchant)]);\n  yield all([takeEvery(actionTypes.UPGRADE_MERCHANT, upgradeMerchant)]);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/merchant/saga.js"],"names":["all","call","put","takeEvery","notification","actionTypes","actionGetAllMechants","actionSuccessGetAllMechants","actionSuccessVerifyMechant","actionSuccessGetSingleMechant","axios","API","config","headers","Authorization","TOKEN","sagaFetchMerchants","url","ADMIN_BASE_URL","data","get","then","response","merchant","catch","err","console","log","sagaFetchSingleMerchant","merchant_id","sagaVerifyMerchant","id","user","account_id","toString","post","sagaUpgradeMerchant","getAllMechants","merchants","getSingleMechant","payloadmerchant_id","verifyMerchant","payload","upgradeMerchant","isUpgraded","actionUpgradeMerchantSuccess","rootSaga","GET_ALL_MERCHANTS","GET_SINGLE_MERCHANT","VERIFY_MERCHANT","UPGRADE_MERCHANT"],"mappings":"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","sourcesContent":["import { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { notification } from \"antd\";\r\n\r\nimport {\r\n\tactionTypes,\r\n\tactionGetAllMechants,\r\n\tactionSuccessGetAllMechants,\r\n\tactionSuccessVerifyMechant,\r\n\tactionSuccessGetSingleMechant,\r\n} from \"./action\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../API/Api\";\r\n\r\n// NEW\r\n\r\nconst config = {\r\n\theaders: {\r\n\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t},\r\n};\r\n\r\n//FETCH ALL MERCHANTS\r\nconst sagaFetchMerchants = async () => {\r\n\tconst url = API.ADMIN_BASE_URL + \"/merchant\";\r\n\r\n\tconst data = await axios\r\n\t\t.get(url, config)\r\n\t\t.then((response) => {\r\n\t\t\treturn response.data.merchant;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err + \"fetching merchants\");\r\n\t\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n//FETCH SINGLE MERCHANT\r\nconst sagaFetchSingleMerchant = async (merchant_id) => {\r\n\tconst url = API.ADMIN_BASE_URL + \"/merchant/\"+merchant_id;\r\n\r\n\tconst data = await axios\r\n\t\t.get(url, config)\r\n\t\t.then((response) => {\r\n\t\t\treturn response.data.merchant;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err + \"fetching single merchant\");\r\n\t\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n\r\n//VERIFY ALL ACCOUNT\r\nconst sagaVerifyMerchant = async (id) => {\r\n\tconst url = API.ADMIN_BASE_URL + \"/account/verify\";\r\n\r\n\t\r\n\tconst user = {\r\n\t\taccount_id: id.toString()\r\n\t}\r\n\tconsole.log(merchant)\r\n\tconst data = await axios\r\n\t\t.post(url, user, config)\r\n\t\t.then((response) => {\r\n\t\t\tconsole.log(response.data)\r\n\t\t\treturn response.data;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err + \"Verify Merchant\");\r\n\t\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n//UPGRADE  MERCHANT\r\nconst sagaUpgradeMerchant = async (merchant_id)=>{\r\n\tconst url = API.ADMIN_BASE_URL + \"/admin/upgrade\"\r\n\tconst merchant = {\r\n\t\taccount_id: merchant_id.toString()\r\n\t  }\r\n\tconst data = await axios.post(url, merchant, config).then((response)=>{\r\n\t\t\tconsole.log(response.data)\r\n\t\t\treturn response.data\r\n\t})\r\n\r\n\treturn data\r\n}\r\n// function* postCategory(payload) {\r\n// \ttry {\r\n// \t\tconst isCateAdded = yield call(sagaAddCategory, payload.category);\r\n// \t\tyield put(addCategorySuccess(isCateAdded));\r\n// \t} catch (err) {\r\n// \t\tconsole.log(err);\r\n// \t}\r\n// }\r\n\r\nfunction* getAllMechants() {\r\n\ttry {\r\n\t\tconst merchants = yield call(sagaFetchMerchants);\r\n\t\tyield put(actionSuccessGetAllMechants(merchants));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* getSingleMechant(merchant_id) {\r\n\ttry {\r\n\t\tconst merchant = yield call(sagaFetchSingleMerchant, payloadmerchant_id);\r\n\t\tyield put(actionSuccessGetSingleMechant (merchant));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* verifyMerchant(payload) {\r\n\ttry {\r\n\t\tconst merchants = yield call(sagaVerifyMerchant, payload.merchant_id);\r\n\t\tyield put(actionSuccessVerifyMechant(merchants));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* upgradeMerchant(payload) {\r\n\ttry {\r\n\t\tconst isUpgraded = yield call(sagaUpgradeMerchant, payload.merchant_id);\r\n\t\tyield put(actionUpgradeMerchantSuccess(isUpgraded));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\n// function* deleteCategory(payload) {\r\n// \ttry {\r\n// \t\tconst isDeleted = yield call(sagaDeleteCategories, payload.id);\r\n// \t\tyield put(deleteCategorySuccess(isDeleted));\r\n// \t} catch (err) {\r\n// \t\tconsole.log(err);\r\n// \t}\r\n// }\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.GET_ALL_MERCHANTS, getAllMechants)]);\r\n\tyield all([takeEvery(actionTypes.GET_SINGLE_MERCHANT, getSingleMechant)]);\r\n\tyield all([takeEvery(actionTypes.VERIFY_MERCHANT, verifyMerchant)]);\r\n\tyield all([takeEvery(actionTypes.UPGRADE_MERCHANT, upgradeMerchant)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}