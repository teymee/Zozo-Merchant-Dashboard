{"ast":null,"code":"import { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { notification } from \"antd\";\nimport { actionTypes, addProduct, addProductSuccess, fetchPRODUCTSuccess, deletePRODUCTSuccess, getMerchantProductSuccess } from \"./action\";\nimport axios from \"axios\";\nimport { API } from \"../API/Api\";\n\nconst modalSuccess = type => {\n  notification[type]({\n    message: \"Success\",\n    description: \"You are login successful!\"\n  });\n}; // POST PRODUCT\n\n\nconst sagaAddProduct = async product => {\n  const url = API.MERCHANT_ADMIN_BASE_URL + \"/product/add\";\n  const config = {\n    headers: {\n      Authorization: \"Bearer\" + API.TOKEN\n    }\n  };\n  const data = await axios.post(url, product, config).then(response => {\n    console.log(\"saga add product\" + response);\n    return response.data.product.name;\n  });\n  return data;\n}; //GET SPECIFIC MERCHANT'S PRODUCT\n\n\nconst sagaGetMerchantProducts = async id => {\n  const url = API.MERCHANT_ADMIN_BASE_URL + \"/product/all/\" + id;\n  const config = {\n    headers: {\n      Authorization: \"Bearer\" + API.TOKEN\n    }\n  };\n  const data = await axios.get(url, config).then(response => {\n    return response.data.products;\n  });\n  return data;\n};\n\nfunction* postProduct(payload) {\n  try {\n    const isProductAdded = yield call(sagaAddProduct, payload.product);\n    yield put(addProductSuccess(isProductAdded));\n    modalSuccess(\"success\");\n  } catch (err) {\n    console.log(err + \"adding product saga\");\n  }\n}\n\nfunction* getMerchantProduct(payload) {\n  try {\n    const merchantProducts = yield call(sagaGetMerchantProducts, payload.id);\n    yield put(getMerchantProductSuccess(merchantProducts));\n  } catch (err) {\n    console.log(err + \"getting merchant product saga\"); // alert(err + \"getting merchant product saga\");\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.PRODUCT_POST, postProduct)]);\n  yield all([takeEvery(actionTypes.MERCHANT_PRODUCT_GET, getMerchantProduct)]); // yield all([takeEvery(actionTypes.PRODUCT_DELETE, deletePRODUCT)]);\n  // yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/product/saga.js"],"names":["all","call","put","takeEvery","notification","actionTypes","addProduct","addProductSuccess","fetchPRODUCTSuccess","deletePRODUCTSuccess","getMerchantProductSuccess","axios","API","modalSuccess","type","message","description","sagaAddProduct","product","url","MERCHANT_ADMIN_BASE_URL","config","headers","Authorization","TOKEN","data","post","then","response","console","log","name","sagaGetMerchantProducts","id","get","products","postProduct","payload","isProductAdded","err","getMerchantProduct","merchantProducts","rootSaga","PRODUCT_POST","MERCHANT_PRODUCT_GET"],"mappings":"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","sourcesContent":["import { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { notification } from \"antd\";\r\n\r\nimport {\r\n\tactionTypes,\r\n\taddProduct,\r\n\taddProductSuccess,\r\n\tfetchPRODUCTSuccess,\r\n\tdeletePRODUCTSuccess,\r\n      getMerchantProductSuccess,\r\n} from \"./action\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../API/Api\";\r\n\r\n\r\nconst modalSuccess = (type) => {\r\n\tnotification[type]({\r\n\t\tmessage: \"Success\",\r\n\t\tdescription: \"You are login successful!\",\r\n\t});\r\n};\r\n\r\n// POST PRODUCT\r\nconst sagaAddProduct = async (product) => {\r\n\tconst url = API.MERCHANT_ADMIN_BASE_URL + \"/product/add\";\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\r\n\tconst data = await axios\r\n\t\t.post(url, product, config)\r\n\t\t.then((response) => {\r\n\t\t\tconsole.log(\"saga add product\" + response);\r\n\t\t\treturn response.data.product.name;\r\n\t\t})\r\n\treturn data;\r\n};\r\n\r\n\r\n\r\n//GET SPECIFIC MERCHANT'S PRODUCT\r\nconst sagaGetMerchantProducts = async (id) => {\r\n\tconst url = API.MERCHANT_ADMIN_BASE_URL + \"/product/all/\" + id;\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\r\n\tconst data =  await axios.get(url, config).then((response)=>{\r\n           \r\n            return response.data.products\r\n      });\r\n\r\n      return data\r\n};\r\n\r\nfunction* postProduct(payload) {\r\n\ttry {\r\n\t\tconst isProductAdded = yield call(sagaAddProduct, payload.product);\r\n\t\tyield put(addProductSuccess(isProductAdded));\r\n\t\tmodalSuccess(\"success\");\r\n\t} catch (err) {\r\n\t\tconsole.log(err + \"adding product saga\");\r\n\t}\r\n}\r\n\r\nfunction* getMerchantProduct(payload) {\r\n\ttry {\r\n\t\tconst merchantProducts = yield call(sagaGetMerchantProducts, payload.id);\r\n\t\tyield put(getMerchantProductSuccess(merchantProducts));\r\n\t} catch (err) {\r\n            console.log(err + \"getting merchant product saga\");\r\n\t\t// alert(err + \"getting merchant product saga\");\r\n\t}\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.PRODUCT_POST, postProduct)]);\r\n\tyield all([takeEvery(actionTypes.MERCHANT_PRODUCT_GET, getMerchantProduct)]);\r\n\t// yield all([takeEvery(actionTypes.PRODUCT_DELETE, deletePRODUCT)]);\r\n\t// yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}