{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(postProduct),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(getMerchantProduct),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { notification } from \"antd\";\nimport { actionTypes, addProduct, addProductSuccess, fetchPRODUCTSuccess, deletePRODUCTSuccess } from \"./action\";\nimport axios from \"axios\";\nimport { API } from \"../API/Api\"; // POST PRODUCT\n\nvar sagaAddProduct = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(product) {\n    var url, config, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = API.MERCHANT_MERCHANT_BASE_URL + \"/product/add\";\n            config = {\n              headers: {\n                Authorization: \"Bearer\" + API.TOKEN\n              }\n            };\n            _context.next = 4;\n            return axios.post(url, product, config).then(function (response) {\n              console.log(\"saga add product\" + response);\n              return response.data.product.name;\n            })[\"catch\"](function (err) {\n              alert(err + \"adding product saga\");\n            });\n\n          case 4:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function sagaAddProduct(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); //GET SPECIFIC MERCHANT'S PRODUCT\n\n\nvar sagaGetMerchantProducts = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n    var url, config, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = API.MERCHANT_MERCHANT_BASE_URL + \"/product/all/\" + id;\n            config = {\n              headers: {\n                Authorization: \"Bearer\" + API.TOKEN\n              }\n            };\n            _context2.next = 4;\n            return axios.get(url).then(function (response) {\n              console.log(response.data);\n              return response.data;\n            });\n\n          case 4:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\");\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function sagaGetMerchantProducts(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nfunction postProduct(payload) {\n  var isProductAdded;\n  return _regeneratorRuntime.wrap(function postProduct$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(sagaAddProduct, payload.product);\n\n        case 3:\n          isProductAdded = _context3.sent;\n          _context3.next = 6;\n          return put(addProductSuccess(isProductAdded));\n\n        case 6:\n          _context3.next = 11;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          alert(_context3.t0 + \"adding product saga\");\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction getMerchantProduct(payload) {\n  var merchantProducts;\n  return _regeneratorRuntime.wrap(function getMerchantProduct$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(sagaGetMerchantProducts, payload.id);\n\n        case 3:\n          merchantProducts = _context4.sent;\n          _context4.next = 6;\n          return put(addProductSuccess(merchantProducts));\n\n        case 6:\n          _context4.next = 11;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          alert(_context4.t0 + \"adding product saga\");\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([takeEvery(actionTypes.PRODUCT_POST, postProduct)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/product/saga.js"],"names":["postProduct","getMerchantProduct","rootSaga","all","call","put","takeEvery","notification","actionTypes","addProduct","addProductSuccess","fetchPRODUCTSuccess","deletePRODUCTSuccess","axios","API","sagaAddProduct","product","url","MERCHANT_MERCHANT_BASE_URL","config","headers","Authorization","TOKEN","post","then","response","console","log","data","name","err","alert","sagaGetMerchantProducts","id","get","payload","isProductAdded","merchantProducts","PRODUCT_POST"],"mappings":"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","sourcesContent":["import { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { notification } from \"antd\";\r\n\r\nimport {\r\n\tactionTypes,\r\n\taddProduct,\r\n\taddProductSuccess,\r\n\tfetchPRODUCTSuccess,\r\n\tdeletePRODUCTSuccess,\r\n} from \"./action\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../API/Api\";\r\n\r\n// POST PRODUCT\r\nconst sagaAddProduct = async (product) => {\r\n\tconst url = API.MERCHANT_MERCHANT_BASE_URL + \"/product/add\";\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\r\n\tconst data = await axios\r\n\t\t.post(url, product, config)\r\n\t\t.then((response) => {\r\n\t\t\tconsole.log(\"saga add product\" + response);\r\n\t\t\treturn response.data.product.name;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\talert(err + \"adding product saga\");\r\n\t\t});\r\n\treturn data;\r\n};\r\n\r\n//GET SPECIFIC MERCHANT'S PRODUCT\r\nconst sagaGetMerchantProducts = async (id) => {\r\n\tconst url = API.MERCHANT_MERCHANT_BASE_URL + \"/product/all/\" + id;\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\r\n\tconst data =  await axios.get(url).then((response)=>{\r\n            console.log(response.data)\r\n            return response.data\r\n      });\r\n\r\n      return \r\n};\r\n\r\nfunction* postProduct(payload) {\r\n\ttry {\r\n\t\tconst isProductAdded = yield call(sagaAddProduct, payload.product);\r\n\t\tyield put(addProductSuccess(isProductAdded));\r\n\t} catch (err) {\r\n\t\talert(err + \"adding product saga\");\r\n\t}\r\n}\r\n\r\nfunction* getMerchantProduct(payload) {\r\n\ttry {\r\n\t\tconst merchantProducts = yield call(sagaGetMerchantProducts, payload.id);\r\n\t\tyield put(addProductSuccess(merchantProducts));\r\n\t} catch (err) {\r\n\t\talert(err + \"adding product saga\");\r\n\t}\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.PRODUCT_POST, postProduct)]);\r\n\t// yield all([takeEvery(actionTypes.PRODUCT_GET, getPRODUCT)]);\r\n\t// yield all([takeEvery(actionTypes.PRODUCT_DELETE, deletePRODUCT)]);\r\n\t// yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}