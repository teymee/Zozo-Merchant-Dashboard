{"ast":null,"code":"import { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { notification } from \"antd\";\nimport { actionTypes, addProduct, addProductSuccess, fetchPRODUCTSuccess, deletePRODUCTSuccess } from \"./action\";\nimport axios from \"axios\";\nimport { API } from \"../API/Api\"; // POST PRODUCT\n\nconst sagaAddProduct = async product => {\n  const url = API.MERCHANT_BASE_URL + \"/product/add\";\n  const config = {\n    headers: {\n      Authorization: \"Bearer\" + API.TOKEN\n    }\n  };\n  const data = await axios.post(url, product, config).then(response => {\n    console.log(\"saga add product\" + response);\n    return response.data;\n  }).catch(err => {\n    console.log(err);\n  });\n  return data;\n};\n\nfunction* postProduct(payload) {\n  const isProductAdded = yield call(sagaAddProduct, payload.product);\n  yield put(addProductSuccess(isProductAdded)); // try {\n  // } \n  // catch (err) {\n  // \talert(err);\n  // }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.PRODUCT_POST, postProduct)]); // yield all([takeEvery(actionTypes.PRODUCT_GET, getPRODUCT)]);\n  // yield all([takeEvery(actionTypes.PRODUCT_DELETE, deletePRODUCT)]);\n  // yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/product/saga.js"],"names":["all","call","put","takeEvery","notification","actionTypes","addProduct","addProductSuccess","fetchPRODUCTSuccess","deletePRODUCTSuccess","axios","API","sagaAddProduct","product","url","MERCHANT_BASE_URL","config","headers","Authorization","TOKEN","data","post","then","response","console","log","catch","err","postProduct","payload","isProductAdded","rootSaga","PRODUCT_POST"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAASC,YAAT,QAA6B,MAA7B;AAEA,SACCC,WADD,EAECC,UAFD,EAGCC,iBAHD,EAICC,mBAJD,EAKCC,oBALD,QAMO,UANP;AAOA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,YAApB,C,CAEA;;AACA,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AACzC,QAAMC,GAAG,GAAGH,GAAG,CAACI,iBAAJ,GAAwB,cAApC;AACA,QAAMC,MAAM,GAAG;AACdC,IAAAA,OAAO,EAAE;AACRC,MAAAA,aAAa,EAAE,WAAWP,GAAG,CAACQ;AADtB;AADK,GAAf;AAMA,QAAMC,IAAI,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAWP,GAAX,EAAgBD,OAAhB,EAAyBG,MAAzB,EAAiCM,IAAjC,CAAuCC,QAAD,IAAc;AACtEC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBF,QAAjC;AACA,WAAOA,QAAQ,CAACH,IAAhB;AACA,GAHkB,EAGhBM,KAHgB,CAGTC,GAAD,IAAO;AACLH,IAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACL,GALa,CAAnB;AAMA,SAAOP,IAAP;AACA,CAfD;;AAiBA,UAAUQ,WAAV,CAAsBC,OAAtB,EAA+B;AACzB,QAAMC,cAAc,GAAG,MAAM7B,IAAI,CAACW,cAAD,EAAiBiB,OAAO,CAAChB,OAAzB,CAAjC;AACA,QAAMX,GAAG,CAACK,iBAAiB,CAACuB,cAAD,CAAlB,CAAT,CAFyB,CAG9B;AACA;AACK;AACL;AACA;AACA;;AAED,eAAe,UAAUC,QAAV,GAAqB;AACnC,QAAM/B,GAAG,CAAC,CAACG,SAAS,CAACE,WAAW,CAAC2B,YAAb,EAA2BJ,WAA3B,CAAV,CAAD,CAAT,CADmC,CAEnC;AACA;AACA;AACA","sourcesContent":["import { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { notification } from \"antd\";\r\n\r\nimport {\r\n\tactionTypes,\r\n\taddProduct,\r\n\taddProductSuccess,\r\n\tfetchPRODUCTSuccess,\r\n\tdeletePRODUCTSuccess,\r\n} from \"./action\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../API/Api\";\r\n\r\n// POST PRODUCT\r\nconst sagaAddProduct = async (product) => {\r\n\tconst url = API.MERCHANT_BASE_URL + \"/product/add\";\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\r\n\tconst data = await axios.post(url, product, config).then((response) => {\r\n\t\tconsole.log(\"saga add product\" + response);\r\n\t\treturn response.data;\r\n\t}).catch((err)=>{\r\n            console.log(err)\r\n      });\r\n\treturn data;\r\n};\r\n\r\nfunction* postProduct(payload) {\r\n      const isProductAdded = yield call(sagaAddProduct, payload.product);\r\n      yield put(addProductSuccess(isProductAdded));\r\n\t// try {\r\n\t// } \r\n      // catch (err) {\r\n\t// \talert(err);\r\n\t// }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.PRODUCT_POST, postProduct)]);\r\n\t// yield all([takeEvery(actionTypes.PRODUCT_GET, getPRODUCT)]);\r\n\t// yield all([takeEvery(actionTypes.PRODUCT_DELETE, deletePRODUCT)]);\r\n\t// yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}