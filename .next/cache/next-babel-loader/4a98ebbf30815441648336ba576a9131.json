{"ast":null,"code":"import axios from \"axios\";\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { API } from \"../API/Api\";\nimport { actionAdminFetchPendingSuccess, actionTypes } from \"./action\"; //POST CREAT BID EVENT\n\nconst sagaCreateBidEvent = async event => {\n  console.log(\"saga func\");\n  const url = API.MERCHANT_MERCHANT_BASE_URL + \"/bidding\";\n  const config = {\n    headers: {\n      Authorization: \"Bearer\" + API.TOKEN\n    }\n  };\n  const data = axios.post(url, event, config).then(response => {\n    console.log(response.data);\n    return response.data;\n  });\n  return data;\n};\n\nconst sagaAdminFetchPendingBidEvent = async () => {\n  const url = API.MERCHANT_BASE_URL + \"/bidding\";\n  const config = {\n    headers: {\n      Authorization: \"Bearer\" + API.TOKEN\n    }\n  };\n  const data = axios.get(url, config).then(response => {\n    console.log(response.data);\n    return response.data;\n  });\n  return data;\n};\n\nfunction* createBidEvent(payload) {\n  try {\n    const isEventAdded = yield call(sagaCreateBidEvent, payload.event);\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* adminFetchBidEvent(payload) {\n  try {\n    const getAllBidEvent = yield call(sagaAdminFetchPendingBidEvent, payload.event);\n    yield put(actionAdminFetchPendingSuccess(getAllBidEvent));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.CREATE_BID_EVENT, createBidEvent)]);\n  yield all([takeEvery(actionTypes.ADMIN_FETCH_PENDING_BID_EVENT, adminFetchBidEvent)]);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/bid/saga.js"],"names":["axios","all","call","put","takeEvery","API","actionAdminFetchPendingSuccess","actionTypes","sagaCreateBidEvent","event","console","log","url","MERCHANT_MERCHANT_BASE_URL","config","headers","Authorization","TOKEN","data","post","then","response","sagaAdminFetchPendingBidEvent","MERCHANT_BASE_URL","get","createBidEvent","payload","isEventAdded","err","adminFetchBidEvent","getAllBidEvent","rootSaga","CREATE_BID_EVENT","ADMIN_FETCH_PENDING_BID_EVENT"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,8BAAT,EAAyCC,WAAzC,QAA4D,UAA5D,C,CAEA;;AACA,MAAMC,kBAAkB,GAAG,MAAOC,KAAP,IAAiB;AAC3CC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,QAAMC,GAAG,GAAGP,GAAG,CAACQ,iBAAJ,GAAwB,UAApC;AACA,QAAMC,MAAM,GAAG;AACdC,IAAAA,OAAO,EAAE;AACRC,MAAAA,aAAa,EAAE,WAAWX,GAAG,CAACY;AADtB;AADK,GAAf;AAKA,QAAMC,IAAI,GAAGlB,KAAK,CAACmB,IAAN,CAAWP,GAAX,EAAgBH,KAAhB,EAAuBK,MAAvB,EAA+BM,IAA/B,CAAqCC,QAAD,IAAc;AAC9DX,IAAAA,OAAO,CAACC,GAAR,CAAYU,QAAQ,CAACH,IAArB;AACA,WAAOG,QAAQ,CAACH,IAAhB;AACA,GAHY,CAAb;AAKA,SAAOA,IAAP;AACA,CAdD;;AAgBA,MAAMI,6BAA6B,GAAG,YAAY;AACjD,QAAMV,GAAG,GAAGP,GAAG,CAACkB,QAAJ,GAAe,UAA3B;AACA,QAAMT,MAAM,GAAG;AACdC,IAAAA,OAAO,EAAE;AACRC,MAAAA,aAAa,EAAE,WAAWX,GAAG,CAACY;AADtB;AADK,GAAf;AAMA,QAAMC,IAAI,GAAGlB,KAAK,CAACwB,GAAN,CAAUZ,GAAV,EAAeE,MAAf,EAAuBM,IAAvB,CAA6BC,QAAD,IAAc;AACtDX,IAAAA,OAAO,CAACC,GAAR,CAAYU,QAAQ,CAACH,IAArB;AACA,WAAOG,QAAQ,CAACH,IAAhB;AACA,GAHY,CAAb;AAKA,SAAOA,IAAP;AACA,CAdD;;AAgBA,UAAUO,cAAV,CAAyBC,OAAzB,EAAkC;AACjC,MAAI;AACH,UAAMC,YAAY,GAAG,MAAMzB,IAAI,CAACM,kBAAD,EAAqBkB,OAAO,CAACjB,KAA7B,CAA/B;AACA,GAFD,CAEE,OAAOmB,GAAP,EAAY;AACblB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,GAAZ;AACA;AACD;;AAED,UAAUC,kBAAV,CAA6BH,OAA7B,EAAsC;AACrC,MAAI;AACH,UAAMI,cAAc,GAAG,MAAM5B,IAAI,CAChCoB,6BADgC,EAEhCI,OAAO,CAACjB,KAFwB,CAAjC;AAIA,UAAMN,GAAG,CAACG,8BAA8B,CAACwB,cAAD,CAA/B,CAAT;AACA,GAND,CAME,OAAOF,GAAP,EAAY;AACblB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,GAAZ;AACA;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AACnC,QAAM9B,GAAG,CAAC,CAACG,SAAS,CAACG,WAAW,CAACyB,gBAAb,EAA+BP,cAA/B,CAAV,CAAD,CAAT;AACA,QAAMxB,GAAG,CAAC,CACTG,SAAS,CAACG,WAAW,CAAC0B,6BAAb,EAA4CJ,kBAA5C,CADA,CAAD,CAAT;AAGA","sourcesContent":["import axios from \"axios\";\r\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { API } from \"../API/Api\";\r\nimport { actionAdminFetchPendingSuccess, actionTypes } from \"./action\";\r\n\r\n//POST CREAT BID EVENT\r\nconst sagaCreateBidEvent = async (event) => {\r\n\tconsole.log(\"saga func\");\r\n\tconst url = API.MERCHANT_MERCHANT_BASE_URL + \"/bidding\";\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\tconst data = axios.post(url, event, config).then((response) => {\r\n\t\tconsole.log(response.data);\r\n\t\treturn response.data;\r\n\t});\r\n\r\n\treturn data;\r\n};\r\n\r\nconst sagaAdminFetchPendingBidEvent = async () => {\r\n\tconst url = API.MERCHANT_BASE_URL + \"/bidding\";\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\r\n\tconst data = axios.get(url, config).then((response) => {\r\n\t\tconsole.log(response.data);\r\n\t\treturn response.data;\r\n\t});\r\n\r\n\treturn data;\r\n};\r\n\r\nfunction* createBidEvent(payload) {\r\n\ttry {\r\n\t\tconst isEventAdded = yield call(sagaCreateBidEvent, payload.event);\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* adminFetchBidEvent(payload) {\r\n\ttry {\r\n\t\tconst getAllBidEvent = yield call(\r\n\t\t\tsagaAdminFetchPendingBidEvent,\r\n\t\t\tpayload.event\r\n\t\t);\r\n\t\tyield put(actionAdminFetchPendingSuccess(getAllBidEvent));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.CREATE_BID_EVENT, createBidEvent)]);\r\n\tyield all([\r\n\t\ttakeEvery(actionTypes.ADMIN_FETCH_PENDING_BID_EVENT, adminFetchBidEvent),\r\n\t]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}