{"ast":null,"code":"import axios from \"axios\";\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { API, whoami } from \"../API/Api\";\nimport { actionAdminFetchAuctionsSuccess, actionApproveEventSuccess, actionCreateBidEventSuccess, actionTypes } from \"./action\";\nimport { notification } from \"antd\";\nconst config = {\n  headers: {\n    Authorization: \"Bearer \" + API.TOKEN\n  }\n};\n\nconst modalSuccess = type => {\n  notification[type]({\n    message: \"Successful\",\n    description: \"Auction Created successful!y\"\n  });\n};\n\nconst modalWarning = type => {\n  notification[type]({\n    message: \"Error\",\n    description: \"Error while creating an Auction!\"\n  });\n}; //POST CREAT BID EVENT\n\n\nconst sagaCreateBidEvent = async event => {\n  console.log(\"saga func\");\n  const url = API.MERCHANT_MERCHANT_BASE_URL + \"/bidding\";\n  const config = {\n    headers: {\n      Authorization: \"Bearer \" + API.TOKEN\n    }\n  };\n  const data = axios.post(url, event, config).then(response => {\n    console.log(response.data);\n    return response.data;\n  }).catch(err => {\n    console.log(err);\n    return false;\n  });\n  return data;\n}; //GET MERCHANT BIDDING EVENT\n\n\nconst sagaAdminFetchBidEvent = async status => {\n  let data;\n  const merchant = await whoami(API.TOKEN);\n  const user = merchant.merchant.id;\n\n  if (status === \"pending\") {\n    const url = API.MERCHANT_BASE_URL + \"/bidding/\" + user;\n    console.log(status);\n    data = axios.get(url, config).then(response => {\n      const pendingBids = response.data.bidding_event.filter(bid => {\n        return bid.approved === false;\n      });\n      return pendingBids;\n    });\n  } else if (status === \"approved\") {\n    const url = API.MERCHANT_BASE_URL + \"/bidding/\" + user;\n    console.log(status);\n    data = axios.get(url, config).then(response => {\n      console.log(response.data.bidding_event);\n      const approvedBids = response.data.bidding_event.filter(bid => {\n        return bid.approved === true;\n      });\n      return approvedBids;\n    });\n  } else {\n    const url = API.MERCHANT_BASE_URL + \"/bidding/status\";\n    const eventStatus = {\n      status,\n      me\n    };\n    console.log(eventStatus);\n    data = axios.post(url, eventStatus, config).then(response => {\n      console.log(response.data);\n      return response.data.bidding_event;\n    });\n  }\n\n  return data;\n}; //SAGA FUNCTIONS\n//CREATE AUCTION\n\n\nfunction* createBidEvent(payload) {\n  try {\n    const isEventAdded = yield call(sagaCreateBidEvent, payload.event);\n    yield put(actionCreateBidEventSuccess(isEventAdded));\n    console.log(isEventAdded);\n\n    if (!isEventAdded) {\n      modalWarning(\"warning\");\n    } else {\n      modalSuccess(\"success\");\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* adminFetchBidEvent(payload) {\n  try {\n    const getAllBidEvent = yield call(sagaAdminFetchBidEvent, payload.status);\n    console.log(getAllBidEvent);\n    yield put(actionAdminFetchAuctionsSuccess(getAllBidEvent));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* approveBidEvent(payload) {\n  try {\n    const isApproved = yield call(sagaApproveBidEvent, payload.event_id);\n    console.log(isApproved);\n    yield put(actionApproveEventSuccess(isApproved));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.CREATE_BID_EVENT, createBidEvent)]);\n  yield all([takeEvery(actionTypes.ADMIN_FETCH_BID_EVENTS, adminFetchBidEvent)]);\n  yield all([takeEvery(actionTypes.APPROVE_BID_EVENT, approveBidEvent)]);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/Merchant dashboard/merchant dashboard/store/bid/saga.js"],"names":["axios","all","call","put","takeEvery","API","whoami","actionAdminFetchAuctionsSuccess","actionApproveEventSuccess","actionCreateBidEventSuccess","actionTypes","notification","config","headers","Authorization","TOKEN","modalSuccess","type","message","description","modalWarning","sagaCreateBidEvent","event","console","log","url","MERCHANT_MERCHANT_BASE_URL","data","post","then","response","catch","err","sagaAdminFetchBidEvent","status","merchant","user","id","MERCHANT_BASE_URL","get","pendingBids","bidding_event","filter","bid","approved","approvedBids","eventStatus","me","createBidEvent","payload","isEventAdded","adminFetchBidEvent","getAllBidEvent","approveBidEvent","isApproved","sagaApproveBidEvent","event_id","rootSaga","CREATE_BID_EVENT","ADMIN_FETCH_BID_EVENTS","APPROVE_BID_EVENT"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { API, whoami } from \"../API/Api\";\r\nimport {\r\n\tactionAdminFetchAuctionsSuccess,\r\n\tactionApproveEventSuccess,\r\n\tactionCreateBidEventSuccess,\r\n\tactionTypes,\r\n} from \"./action\";\r\nimport { notification } from \"antd\";\r\n\r\nconst config = {\r\n\theaders: {\r\n\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t},\r\n};\r\n\r\nconst modalSuccess = (type) => {\r\n\tnotification[type]({\r\n\t\tmessage: \"Successful\",\r\n\t\tdescription: \"Auction Created successful!y\",\r\n\t});\r\n};\r\n\r\nconst modalWarning = (type) => {\r\n\tnotification[type]({\r\n\t\tmessage: \"Error\",\r\n\t\tdescription: \"Error while creating an Auction!\",\r\n\t});\r\n};\r\n\r\n//POST CREAT BID EVENT\r\nconst sagaCreateBidEvent = async (event) => {\r\n\tconsole.log(\"saga func\");\r\n\tconst url = API.MERCHANT_MERCHANT_BASE_URL + \"/bidding\";\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\tconst data = axios\r\n\t\t.post(url, event, config)\r\n\t\t.then((response) => {\r\n\t\t\tconsole.log(response.data);\r\n\t\t\treturn response.data;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\treturn false;\r\n\t\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n//GET MERCHANT BIDDING EVENT\r\nconst sagaAdminFetchBidEvent = async (status) => {\r\n\tlet data;\r\n\r\n\tconst merchant = await whoami(API.TOKEN);\r\n\tconst user = merchant.merchant.id;\r\n\tif (status === \"pending\") {\r\n\t\tconst url = API.MERCHANT_BASE_URL + \"/bidding/\" + user;\r\n\r\n\t\tconsole.log(status);\r\n\t\tdata = axios.get(url, config).then((response) => {\r\n\t\t\tconst pendingBids = response.data.bidding_event.filter((bid) => {\r\n\t\t\t\treturn bid.approved === false;\r\n\t\t\t});\r\n\t\t\treturn pendingBids;\r\n\t\t});\r\n\t} else if (status === \"approved\") {\r\n\t\tconst url = API.MERCHANT_BASE_URL + \"/bidding/\" + user;\r\n\r\n\t\tconsole.log(status);\r\n\t\tdata = axios.get(url, config).then((response) => {\r\n\t\t\tconsole.log(response.data.bidding_event);\r\n\t\t\tconst approvedBids = response.data.bidding_event.filter((bid) => {\r\n\t\t\t\treturn bid.approved === true;\r\n\t\t\t});\r\n\t\t\treturn approvedBids;\r\n\t\t});\r\n\t} else {\r\n\t\tconst url = API.MERCHANT_BASE_URL + \"/bidding/status\";\r\n\r\n\t\tconst eventStatus = {\r\n\t\t\tstatus,\r\n\t\t\tme\r\n\t\t};\r\n\r\n\t\tconsole.log(eventStatus);\r\n\t\tdata = axios.post(url, eventStatus, config).then((response) => {\r\n\t\t\tconsole.log(response.data);\r\n\t\t\treturn response.data.bidding_event;\r\n\t\t});\r\n\t}\r\n\r\n\treturn data;\r\n};\r\n\r\n//SAGA FUNCTIONS\r\n\r\n//CREATE AUCTION\r\nfunction* createBidEvent(payload) {\r\n\ttry {\r\n\t\tconst isEventAdded = yield call(sagaCreateBidEvent, payload.event);\r\n\t\tyield put(actionCreateBidEventSuccess(isEventAdded));\r\n\t\tconsole.log(isEventAdded)\r\n\t\tif (!isEventAdded) {\r\n\t\t\tmodalWarning(\"warning\");\r\n\t\t} else {\r\n\t\t\tmodalSuccess(\"success\");\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* adminFetchBidEvent(payload) {\r\n\ttry {\r\n\t\tconst getAllBidEvent = yield call(sagaAdminFetchBidEvent, payload.status);\r\n\t\tconsole.log(getAllBidEvent);\r\n\t\tyield put(actionAdminFetchAuctionsSuccess(getAllBidEvent));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* approveBidEvent(payload) {\r\n\ttry {\r\n\t\tconst isApproved = yield call(sagaApproveBidEvent, payload.event_id);\r\n\t\tconsole.log(isApproved);\r\n\t\tyield put(actionApproveEventSuccess(isApproved));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.CREATE_BID_EVENT, createBidEvent)]);\r\n\tyield all([\r\n\t\ttakeEvery(actionTypes.ADMIN_FETCH_BID_EVENTS, adminFetchBidEvent),\r\n\t]);\r\n\tyield all([takeEvery(actionTypes.APPROVE_BID_EVENT, approveBidEvent)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}