{"ast":null,"code":"import axios from \"axios\";\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { API } from \"../API/Api\";\nimport { actionAdminFetchAuctionsSuccess, actionApproveEventSuccess, actionCreateBidEventSuccess, actionTypes } from \"./action\";\nconst config = {\n  headers: {\n    Authorization: \"Bearer \" + API.TOKEN\n  }\n}; //POST CREAT BID EVENT\n\nconst sagaCreateBidEvent = async event => {\n  console.log(\"saga func\");\n  const url = API.MERCHANT_MERCHANT_BASE_URL + \"/bidding\";\n  const config = {\n    headers: {\n      Authorization: \"Bearer \" + API.TOKEN\n    }\n  };\n  const data = axios.post(url, event, config).then(response => {\n    console.log(response.data);\n    return response.data;\n  });\n  return data;\n};\n\nconst sagaAdminFetchBidEvent = async status => {\n  let data;\n\n  if (status === \"pending\") {\n    const url = API.MERCHANT_BASE_URL + \"/bidding\";\n    console.log(status);\n    data = axios.get(url, config).then(response => {\n      const pendingBids = response.data.filter(bid => {\n        return bid.approved === false;\n      });\n      return pendingBids;\n    });\n  } else if (status === \"approved\") {\n    const url = API.MERCHANT_BASE_URL + \"/bidding\";\n    console.log(status);\n    data = axios.get(url, config).then(response => {\n      const pendingBids = response.data.filter(bid => {\n        return bid.approved === true;\n      });\n      return pendingBids;\n    });\n  } else {\n    const url = API.MERCHANT_BASE_URL + \"/bidding/status\";\n    const eventStatus = {\n      status\n    };\n    console.log(eventStatus);\n    data = axios.post(url, eventStatus, config).then(response => {\n      console.log(response.data);\n      return response.data;\n    });\n  }\n\n  return data;\n};\n\nconst sagaApproveBidEvent = async event_id => {\n  console.log(\"saga func\");\n  const url = API.MERCHANT_BASE_URL + \"/bidding/approve/\" + event_id;\n  const config = {\n    headers: {\n      Authorization: \"Bearer \" + API.TOKEN\n    }\n  };\n  console.log(url);\n  const data = axios.post(url, event_id, config).then(response => {\n    console.log(response.data);\n    return response.data;\n  });\n  return data;\n};\n\nfunction* createBidEvent(payload) {\n  try {\n    const isEventAdded = yield call(sagaCreateBidEvent, payload.event);\n    yield put(actionCreateBidEventSuccess(isEventAdded));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* adminFetchBidEvent(payload) {\n  try {\n    const getAllBidEvent = yield call(sagaAdminFetchBidEvent, payload.status);\n    yield put(actionAdminFetchAuctionsSuccess(getAllBidEvent.bidding_event));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* approveBidEvent(payload) {\n  try {\n    const isApproved = yield call(sagaApproveBidEvent, payload.event_id);\n    console.log(isApproved);\n    yield put(actionApproveEventSuccess(isApproved));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.CREATE_BID_EVENT, createBidEvent)]);\n  yield all([takeEvery(actionTypes.ADMIN_FETCH_BID_EVENTS, adminFetchBidEvent)]);\n  yield all([takeEvery(actionTypes.APPROVE_BID_EVENT, approveBidEvent)]);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/bid/saga.js"],"names":["axios","all","call","put","takeEvery","API","actionAdminFetchAuctionsSuccess","actionApproveEventSuccess","actionCreateBidEventSuccess","actionTypes","config","headers","Authorization","TOKEN","sagaCreateBidEvent","event","console","log","url","MERCHANT_MERCHANT_BASE_URL","data","post","then","response","sagaAdminFetchBidEvent","status","MERCHANT_BASE_URL","get","pendingBids","filter","bid","approved","eventStatus","sagaApproveBidEvent","event_id","createBidEvent","payload","isEventAdded","err","adminFetchBidEvent","getAllBidEvent","bidding_event","approveBidEvent","isApproved","rootSaga","CREATE_BID_EVENT","ADMIN_FETCH_BID_EVENTS","APPROVE_BID_EVENT"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { API } from \"../API/Api\";\r\nimport {\r\n\tactionAdminFetchAuctionsSuccess,\r\n\tactionApproveEventSuccess,\r\n\tactionCreateBidEventSuccess,\r\n\tactionTypes,\r\n} from \"./action\";\r\n\r\nconst config = {\r\n\theaders: {\r\n\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t},\r\n};\r\n\r\n//POST CREAT BID EVENT\r\nconst sagaCreateBidEvent = async (event) => {\r\n\tconsole.log(\"saga func\");\r\n\tconst url = API.MERCHANT_MERCHANT_BASE_URL + \"/bidding\";\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\tconst data = axios.post(url, event, config).then((response) => {\r\n\t\tconsole.log(response.data);\r\n\t\treturn response.data;\r\n\t});\r\n\r\n\treturn data;\r\n};\r\n\r\nconst sagaAdminFetchBidEvent = async (status) => {\r\n\tlet data;\r\n\tif (status === \"pending\") {\r\n\t\tconst url = API.MERCHANT_BASE_URL + \"/bidding\";\r\n\r\n\t\tconsole.log(status);\r\n\t\tdata = axios.get(url, config).then((response) => {\r\n\t\t\t\r\n\t\t\tconst pendingBids = response.data.filter((bid)=>{\r\n\t\t\t\treturn bid.approved === false\r\n\t\t\t}) \r\n\t\t\treturn pendingBids;\r\n\t\t});\r\n\r\n\t} else if (status === \"approved\") {\r\n\t\tconst url = API.MERCHANT_BASE_URL + \"/bidding\";\r\n\r\n\t\tconsole.log(status);\r\n\t\tdata = axios.get(url, config).then((response) => {\r\n\t\t\t\r\n\t\t\tconst pendingBids = response.data.filter((bid)=>{\r\n\t\t\t\treturn bid.approved === true\r\n\t\t\t}) \r\n\t\t\treturn pendingBids;\r\n\t\t});\r\n\r\n\t} else {\r\n\t\tconst url = API.MERCHANT_BASE_URL + \"/bidding/status\";\r\n\r\n\t\tconst eventStatus = {\r\n\t\t\tstatus,\r\n\t\t};\r\n\r\n\t\tconsole.log(eventStatus);\r\n\t\tdata = axios.post(url, eventStatus, config).then((response) => {\r\n\t\t\tconsole.log(response.data);\r\n\t\t\treturn response.data;\r\n\t\t});\r\n\t}\r\n\r\n\treturn data;\r\n};\r\n\r\nconst sagaApproveBidEvent = async (event_id) => {\r\n\tconsole.log(\"saga func\");\r\n\tconst url = API.MERCHANT_BASE_URL + \"/bidding/approve/\" + event_id;\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\tconsole.log(url);\r\n\tconst data = axios.post(url, event_id, config).then((response) => {\r\n\t\tconsole.log(response.data);\r\n\t\treturn response.data;\r\n\t});\r\n\r\n\treturn data;\r\n};\r\n\r\nfunction* createBidEvent(payload) {\r\n\ttry {\r\n\t\tconst isEventAdded = yield call(sagaCreateBidEvent, payload.event);\r\n\t\tyield put(actionCreateBidEventSuccess(isEventAdded));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* adminFetchBidEvent(payload) {\r\n\ttry {\r\n\t\tconst getAllBidEvent = yield call(sagaAdminFetchBidEvent, payload.status);\r\n\t\tyield put(actionAdminFetchAuctionsSuccess(getAllBidEvent.bidding_event));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* approveBidEvent(payload) {\r\n\ttry {\r\n\t\tconst isApproved = yield call(sagaApproveBidEvent, payload.event_id);\r\n\t\tconsole.log(isApproved);\r\n\t\tyield put(actionApproveEventSuccess(isApproved));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.CREATE_BID_EVENT, createBidEvent)]);\r\n\tyield all([\r\n\t\ttakeEvery(actionTypes.ADMIN_FETCH_BID_EVENTS, adminFetchBidEvent),\r\n\t]);\r\n\tyield all([takeEvery(actionTypes.APPROVE_BID_EVENT, approveBidEvent)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}