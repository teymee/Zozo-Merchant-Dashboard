{"ast":null,"code":"import { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { notification } from \"antd\";\nimport { actionTypes, addProduct, addProductSuccess, fetchPRODUCTSuccess, deletePRODUCTSuccess } from \"./action\";\nimport axios from \"axios\";\nimport { API } from \"../API/Api\"; // POST PRODUCT\n\nconst sagaAddProduct = async product => {\n  const url = API.MERCHANT_BASE_URL + \"/product/add\";\n  const config = {\n    headers: {\n      Authorization: \"Bearer\" + API.TOKEN\n    }\n  };\n  const data = await axios.post(url, product, config).then(response => {\n    console.log(\"saga add product\" + response);\n    return response.data.product.name;\n  }).catch(err => {\n    alert(err + \"adding product saga\");\n  });\n  return data;\n}; //GET SPECIFIC MERCHANT'S PRODUCT\n\n\nconst sagaGetMerchantProducts = async id => {\n  const url = API.MERCHANT_BASE_URL + \"/product/all/\" + id;\n  const config = {\n    headers: {\n      Authorization: \"Bearer\" + API.TOKEN\n    }\n  };\n  const data = await axios.get(url).then(response => {\n    console.log(response.data);\n    return response.data;\n  });\n  return data;\n};\n\nfunction* postProduct(payload) {\n  try {\n    const isProductAdded = yield call(sagaAddProduct, payload.product);\n    yield put(addProductSuccess(isProductAdded));\n  } catch (err) {\n    alert(err + \"adding product saga\");\n  }\n}\n\nfunction* getMerchantProduct(payload) {\n  try {\n    const merchantProducts = yield call(sagaGetMerchantProducts, payload.id);\n    yield put(addProductSuccess(merchantProducts));\n  } catch (err) {\n    alert(err + \"adding product saga\");\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.PRODUCT_POST, postProduct)]);\n  yield all([takeEvery(actionTypes.MERCHANT_PRODUCT_GET, getMerchantProduct)]); // yield all([takeEvery(actionTypes.PRODUCT_DELETE, deletePRODUCT)]);\n  // yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/product/saga.js"],"names":["all","call","put","takeEvery","notification","actionTypes","addProduct","addProductSuccess","fetchPRODUCTSuccess","deletePRODUCTSuccess","axios","API","sagaAddProduct","product","url","MERCHANT_BASE_URL","config","headers","Authorization","TOKEN","data","post","then","response","console","log","name","catch","err","alert","sagaGetMerchantProducts","id","get","postProduct","payload","isProductAdded","getMerchantProduct","merchantProducts","rootSaga","PRODUCT_POST","MERCHANT_PRODUCT_GET"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAASC,YAAT,QAA6B,MAA7B;AAEA,SACCC,WADD,EAECC,UAFD,EAGCC,iBAHD,EAICC,mBAJD,EAKCC,oBALD,QAMO,UANP;AAOA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,YAApB,C,CAEA;;AACA,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AACzC,QAAMC,GAAG,GAAGH,GAAG,CAACI,iBAAJ,GAAwB,cAApC;AACA,QAAMC,MAAM,GAAG;AACdC,IAAAA,OAAO,EAAE;AACRC,MAAAA,aAAa,EAAE,WAAWP,GAAG,CAACQ;AADtB;AADK,GAAf;AAMA,QAAMC,IAAI,GAAG,MAAMV,KAAK,CACtBW,IADiB,CACZP,GADY,EACPD,OADO,EACEG,MADF,EAEjBM,IAFiB,CAEXC,QAAD,IAAc;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBF,QAAjC;AACA,WAAOA,QAAQ,CAACH,IAAT,CAAcP,OAAd,CAAsBa,IAA7B;AACA,GALiB,EAMjBC,KANiB,CAMVC,GAAD,IAAS;AACfC,IAAAA,KAAK,CAACD,GAAG,GAAG,qBAAP,CAAL;AACA,GARiB,CAAnB;AASA,SAAOR,IAAP;AACA,CAlBD,C,CAoBA;;;AACA,MAAMU,uBAAuB,GAAG,MAAOC,EAAP,IAAc;AAC7C,QAAMjB,GAAG,GAAGH,GAAG,CAACI,iBAAJ,GAAwB,eAAxB,GAA0CgB,EAAtD;AACA,QAAMf,MAAM,GAAG;AACdC,IAAAA,OAAO,EAAE;AACRC,MAAAA,aAAa,EAAE,WAAWP,GAAG,CAACQ;AADtB;AADK,GAAf;AAMA,QAAMC,IAAI,GAAI,MAAMV,KAAK,CAACsB,GAAN,CAAUlB,GAAV,EAAeQ,IAAf,CAAqBC,QAAD,IAAY;AACzCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACH,IAArB;AACA,WAAOG,QAAQ,CAACH,IAAhB;AACL,GAHc,CAApB;AAKK,SAAOA,IAAP;AACL,CAdD;;AAgBA,UAAUa,WAAV,CAAsBC,OAAtB,EAA+B;AAC9B,MAAI;AACH,UAAMC,cAAc,GAAG,MAAMlC,IAAI,CAACW,cAAD,EAAiBsB,OAAO,CAACrB,OAAzB,CAAjC;AACA,UAAMX,GAAG,CAACK,iBAAiB,CAAC4B,cAAD,CAAlB,CAAT;AACA,GAHD,CAGE,OAAOP,GAAP,EAAY;AACbC,IAAAA,KAAK,CAACD,GAAG,GAAG,qBAAP,CAAL;AACA;AACD;;AAED,UAAUQ,kBAAV,CAA6BF,OAA7B,EAAsC;AACrC,MAAI;AACH,UAAMG,gBAAgB,GAAG,MAAMpC,IAAI,CAAC6B,uBAAD,EAA0BI,OAAO,CAACH,EAAlC,CAAnC;AACA,UAAM7B,GAAG,CAACK,iBAAiB,CAAC8B,gBAAD,CAAlB,CAAT;AACA,GAHD,CAGE,OAAOT,GAAP,EAAY;AACbC,IAAAA,KAAK,CAACD,GAAG,GAAG,qBAAP,CAAL;AACA;AACD;;AAED,eAAe,UAAUU,QAAV,GAAqB;AACnC,QAAMtC,GAAG,CAAC,CAACG,SAAS,CAACE,WAAW,CAACkC,YAAb,EAA2BN,WAA3B,CAAV,CAAD,CAAT;AACA,QAAMjC,GAAG,CAAC,CAACG,SAAS,CAACE,WAAW,CAACmC,oBAAb,EAAmCJ,kBAAnC,CAAV,CAAD,CAAT,CAFmC,CAGnC;AACA;AACA","sourcesContent":["import { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { notification } from \"antd\";\r\n\r\nimport {\r\n\tactionTypes,\r\n\taddProduct,\r\n\taddProductSuccess,\r\n\tfetchPRODUCTSuccess,\r\n\tdeletePRODUCTSuccess,\r\n} from \"./action\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../API/Api\";\r\n\r\n// POST PRODUCT\r\nconst sagaAddProduct = async (product) => {\r\n\tconst url = API.MERCHANT_BASE_URL + \"/product/add\";\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\r\n\tconst data = await axios\r\n\t\t.post(url, product, config)\r\n\t\t.then((response) => {\r\n\t\t\tconsole.log(\"saga add product\" + response);\r\n\t\t\treturn response.data.product.name;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\talert(err + \"adding product saga\");\r\n\t\t});\r\n\treturn data;\r\n};\r\n\r\n//GET SPECIFIC MERCHANT'S PRODUCT\r\nconst sagaGetMerchantProducts = async (id) => {\r\n\tconst url = API.MERCHANT_BASE_URL + \"/product/all/\" + id;\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\r\n\tconst data =  await axios.get(url).then((response)=>{\r\n            console.log(response.data)\r\n            return response.data\r\n      });\r\n\r\n      return data\r\n};\r\n\r\nfunction* postProduct(payload) {\r\n\ttry {\r\n\t\tconst isProductAdded = yield call(sagaAddProduct, payload.product);\r\n\t\tyield put(addProductSuccess(isProductAdded));\r\n\t} catch (err) {\r\n\t\talert(err + \"adding product saga\");\r\n\t}\r\n}\r\n\r\nfunction* getMerchantProduct(payload) {\r\n\ttry {\r\n\t\tconst merchantProducts = yield call(sagaGetMerchantProducts, payload.id);\r\n\t\tyield put(addProductSuccess(merchantProducts));\r\n\t} catch (err) {\r\n\t\talert(err + \"adding product saga\");\r\n\t}\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.PRODUCT_POST, postProduct)]);\r\n\tyield all([takeEvery(actionTypes.MERCHANT_PRODUCT_GET, getMerchantProduct)]);\r\n\t// yield all([takeEvery(actionTypes.PRODUCT_DELETE, deletePRODUCT)]);\r\n\t// yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}