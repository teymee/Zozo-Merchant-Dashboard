{"ast":null,"code":"import { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { notification } from \"antd\";\nimport { actionTypes, loginSuccess, logOutSuccess, registerSuccess } from \"./action\";\nimport { API } from \"../API/Api\";\n\nconst modalSuccess = type => {\n  notification[type]({\n    message: \"Welcome back\",\n    description: \"You are login successful!\"\n  });\n};\n\nconst modalWarning = type => {\n  notification[type]({\n    message: \"Good bye!\",\n    description: \"Your account has been logged out!\"\n  });\n};\n\nconst loginAdmin = async loginCred => {\n  console.log(loginCred);\n  const url = \"http://smart-park.xyz/api/v1/login\";\n  console.log(url);\n  const data = axios.post(url, loginCred).then(response => {\n    console.log(response.data);\n    localStorage.setItem(\"token\", JSON.stringify(response.data.token));\n    return response.data;\n  }).catch(err => {\n    console.log(err);\n  });\n  return data;\n};\n\nconst registerAdmin = async registerCred => {\n  console.log(registerCred); // const url = \"https://zozo-auction.herokuapp.com/api/v1/merchant/create\"\n\n  const url = API.MERCHANT_BASE_URL + \"/admin/create\";\n  console.log(url);\n  const data = axios.post(url, registerCred).then(response => {\n    console.log(response.data.token);\n    localStorage.setItem(\"token\", JSON.stringify(response.data.token));\n    return response.data;\n  }).catch(err => {\n    console.log(err);\n  });\n  return data;\n};\n\nfunction* loginSaga(payload) {\n  try {\n    const isLogin = yield call(loginAdmin, payload.loginCred);\n\n    if (isLogin) {\n      yield put(loginSuccess());\n      modalSuccess(\"success\");\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* registerSaga(payload) {\n  try {\n    console.log(payload.registerCred);\n    const isRegistered = yield call(registerAdmin, payload.registerCred);\n\n    if (isRegistered) {\n      yield put(registerSuccess());\n      modalSuccess(\"success\");\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* logOutSaga() {\n  try {\n    yield put(logOutSuccess());\n    modalWarning(\"warning\");\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.LOGIN_REQUEST, loginSaga)]);\n  yield all([takeEvery(actionTypes.REGISTER_REQUEST, registerSaga)]);\n  yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/auth/saga.js"],"names":["all","call","put","takeEvery","axios","notification","actionTypes","loginSuccess","logOutSuccess","registerSuccess","API","modalSuccess","type","message","description","modalWarning","loginAdmin","loginCred","console","log","url","data","post","then","response","localStorage","setItem","JSON","stringify","token","catch","err","registerAdmin","registerCred","MERCHANT_BASE_URL","loginSaga","payload","isLogin","registerSaga","isRegistered","logOutSaga","rootSaga","LOGIN_REQUEST","REGISTER_REQUEST","LOGOUT"],"mappings":"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","sourcesContent":["import { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { notification } from \"antd\";\n\nimport { actionTypes, loginSuccess, logOutSuccess, registerSuccess } from \"./action\";\nimport { API } from \"../API/Api\";\n\n\nconst modalSuccess = (type) => {\n\tnotification[type]({\n\t\tmessage: \"Welcome back\",\n\t\tdescription: \"You are login successful!\",\n\t});\n};\n\nconst modalWarning = (type) => {\n\tnotification[type]({\n\t\tmessage: \"Good bye!\",\n\t\tdescription: \"Your account has been logged out!\",\n\t});\n};\n\nconst loginAdmin = async (loginCred) => {\n\tconsole.log(loginCred);\n\tconst url = \"http://smart-park.xyz/api/v1/login\";\n\n\tconsole.log(url)\n\tconst data = axios\n\t\t.post(url, loginCred)\n\t\t.then((response) => {\n\t\t\tconsole.log(response.data);\n\t\t\tlocalStorage.setItem(\"token\", JSON.stringify(response.data.token));\n\t\t\t\n\t\t\treturn response.data;\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t});\n\treturn data;\n};\n\nconst registerAdmin = async (registerCred) => {\n\tconsole.log(registerCred);\n\t// const url = \"https://zozo-auction.herokuapp.com/api/v1/merchant/create\"\n\tconst url = API.MERCHANT_BASE_URL + \"/admin/create\";\n\tconsole.log(url)\n\n\tconst data = axios\n\t\t.post(url, registerCred)\n\t\t.then((response) => {\n\t\t\tconsole.log(response.data.token);\n\t\t\tlocalStorage.setItem(\"token\", JSON.stringify(response.data.token));\n\t\t\treturn response.data;\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t});\n\treturn data;\n};\n\n\n\nfunction* loginSaga(payload) {\n\ttry {\n\t\tconst isLogin = yield call(loginAdmin, payload.loginCred);\n\t\tif (isLogin) {\n\t\t\tyield put(loginSuccess());\n\t\t\tmodalSuccess(\"success\");\n\t\t}\n\t} catch (err) {\n\t\tconsole.log(err);\n\t}\n}\n\nfunction* registerSaga(payload) {\n\ttry {\n        console.log(payload.registerCred)\n\t\tconst isRegistered = yield call(registerAdmin, payload.registerCred);\n\t\tif (isRegistered) {\n\t\t\tyield put(registerSuccess());\n\t\t\tmodalSuccess(\"success\");\n\t\t}\n\t} catch (err) {\n\t\tconsole.log(err);\n\t}\n}\n\nfunction* logOutSaga() {\n\ttry {\n\t\tyield put(logOutSuccess());\n\t\tmodalWarning(\"warning\");\n\t} catch (err) {\n\t\tconsole.log(err);\n\t}\n}\n\nexport default function* rootSaga() {\n\tyield all([takeEvery(actionTypes.LOGIN_REQUEST, loginSaga)]);\n    yield all([takeEvery(actionTypes.REGISTER_REQUEST, registerSaga)]);\n\tyield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\n}\n"]},"metadata":{},"sourceType":"module"}