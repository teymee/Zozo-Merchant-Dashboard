{"ast":null,"code":"import { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { notification } from \"antd\";\nimport { actionTypes, actionGetAllMechants, actionSuccessGetAllMechants, actionSuccessVerifyMechant } from \"./action\";\nimport axios from \"axios\";\nimport { API } from \"../API/Api\"; // NEW\n\nconst config = {\n  headers: {\n    Authorization: \"Bearer\" + API.TOKEN\n  }\n}; //FETCH ALL MERCHANTS\n\nconst sagaFetchMerchants = async () => {\n  const url = API.MERCHANT_BASE_URL + \"/merchant\";\n  const data = await axios.get(url, config).then(response => {\n    return response.data.merchant;\n  }).catch(err => {\n    console.log(err + \"fetching merchants\");\n  });\n  return data;\n}; //FETCH CATEGORIES\n\n\nconst sagaVerifyMerchant = async merchant_id => {\n  const url = API.MERCHANT_BASE_URL + \"/account/verify\";\n  console.log(\"saga function\");\n  const merchant = {\n    account_id: merchant_id\n  };\n  const data = await axios.post(url, merchant, config).then(response => {\n    console.log(response.data);\n    return response.data;\n  }).catch(err => {\n    console.log(err + \"Verify Merchant\");\n  });\n  return data;\n}; // function* postCategory(payload) {\n// \ttry {\n// \t\tconst isCateAdded = yield call(sagaAddCategory, payload.category);\n// \t\tyield put(addCategorySuccess(isCateAdded));\n// \t} catch (err) {\n// \t\tconsole.log(err);\n// \t}\n// }\n\n\nfunction* getAllMechants() {\n  try {\n    const merchants = yield call(sagaFetchMerchants);\n    yield put(actionSuccessGetAllMechants(merchants));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* verifyMerchant() {\n  try {\n    const merchants = yield call(sagaVerifyMerchant);\n    yield put(actionSuccessVerifyMechant(merchants));\n  } catch (err) {\n    console.log(err);\n  }\n} // function* deleteCategory(payload) {\n// \ttry {\n// \t\tconst isDeleted = yield call(sagaDeleteCategories, payload.id);\n// \t\tyield put(deleteCategorySuccess(isDeleted));\n// \t} catch (err) {\n// \t\tconsole.log(err);\n// \t}\n// }\n\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.GET_ALL_MERCHANTS, getAllMechants)]);\n  yield all([takeEvery(actionTypes.VERIFY_MERCHANT, verifyMerchant)]);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/merchant/saga.js"],"names":["all","call","put","takeEvery","notification","actionTypes","actionGetAllMechants","actionSuccessGetAllMechants","actionSuccessVerifyMechant","axios","API","config","headers","Authorization","TOKEN","sagaFetchMerchants","url","MERCHANT_BASE_URL","data","get","then","response","merchant","catch","err","console","log","sagaVerifyMerchant","merchant_id","account_id","post","getAllMechants","merchants","verifyMerchant","rootSaga","GET_ALL_MERCHANTS","VERIFY_MERCHANT"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAASC,YAAT,QAA6B,MAA7B;AAEA,SACCC,WADD,EAECC,oBAFD,EAGCC,2BAHD,EAICC,0BAJD,QAKO,UALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,YAApB,C,CAEA;;AAEA,MAAMC,MAAM,GAAG;AACdC,EAAAA,OAAO,EAAE;AACRC,IAAAA,aAAa,EAAE,WAAWH,GAAG,CAACI;AADtB;AADK,CAAf,C,CAKA;;AACA,MAAMC,kBAAkB,GAAG,YAAY;AACtC,QAAMC,GAAG,GAAGN,GAAG,CAACO,QAAJ,GAAe,WAA3B;AAEA,QAAMC,IAAI,GAAG,MAAMT,KAAK,CACtBU,GADiB,CACbH,GADa,EACRL,MADQ,EAEjBS,IAFiB,CAEXC,QAAD,IAAc;AACnB,WAAOA,QAAQ,CAACH,IAAT,CAAcI,QAArB;AACA,GAJiB,EAKjBC,KALiB,CAKVC,GAAD,IAAS;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,GAAG,oBAAlB;AACA,GAPiB,CAAnB;AASA,SAAON,IAAP;AACA,CAbD,C,CAeA;;;AACA,MAAMS,kBAAkB,GAAG,MAAOC,WAAP,IAAuB;AACjD,QAAMZ,GAAG,GAAGN,GAAG,CAACO,QAAJ,GAAe,iBAA3B;AAEAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,QAAMJ,QAAQ,GAAG;AAChBO,IAAAA,UAAU,EAAED;AADI,GAAjB;AAGA,QAAMV,IAAI,GAAG,MAAMT,KAAK,CACtBqB,IADiB,CACZd,GADY,EACPM,QADO,EACGX,MADH,EAEjBS,IAFiB,CAEXC,QAAD,IAAc;AACnBI,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACH,IAArB;AACA,WAAOG,QAAQ,CAACH,IAAhB;AACA,GALiB,EAMjBK,KANiB,CAMVC,GAAD,IAAS;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,GAAG,iBAAlB;AACA,GARiB,CAAnB;AAUA,SAAON,IAAP;AACA,CAlBD,C,CAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,UAAUa,cAAV,GAA2B;AAC1B,MAAI;AACH,UAAMC,SAAS,GAAG,MAAM/B,IAAI,CAACc,kBAAD,CAA5B;AACA,UAAMb,GAAG,CAACK,2BAA2B,CAACyB,SAAD,CAA5B,CAAT;AACA,GAHD,CAGE,OAAOR,GAAP,EAAY;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA;AACD;;AAED,UAAUS,cAAV,GAA2B;AAC1B,MAAI;AACH,UAAMD,SAAS,GAAG,MAAM/B,IAAI,CAAC0B,kBAAD,CAA5B;AACA,UAAMzB,GAAG,CAACM,0BAA0B,CAACwB,SAAD,CAA3B,CAAT;AACA,GAHD,CAGE,OAAOR,GAAP,EAAY;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe,UAAUU,QAAV,GAAqB;AACnC,QAAMlC,GAAG,CAAC,CAACG,SAAS,CAACE,WAAW,CAAC8B,iBAAb,EAAgCJ,cAAhC,CAAV,CAAD,CAAT;AACA,QAAM/B,GAAG,CAAC,CAACG,SAAS,CAACE,WAAW,CAAC+B,eAAb,EAA8BH,cAA9B,CAAV,CAAD,CAAT;AACA","sourcesContent":["import { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { notification } from \"antd\";\r\n\r\nimport {\r\n\tactionTypes,\r\n\tactionGetAllMechants,\r\n\tactionSuccessGetAllMechants,\r\n\tactionSuccessVerifyMechant,\r\n} from \"./action\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../API/Api\";\r\n\r\n// NEW\r\n\r\nconst config = {\r\n\theaders: {\r\n\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t},\r\n};\r\n//FETCH ALL MERCHANTS\r\nconst sagaFetchMerchants = async () => {\r\n\tconst url = API.MERCHANT_BASE_URL + \"/merchant\";\r\n\r\n\tconst data = await axios\r\n\t\t.get(url, config)\r\n\t\t.then((response) => {\r\n\t\t\treturn response.data.merchant;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err + \"fetching merchants\");\r\n\t\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n//FETCH CATEGORIES\r\nconst sagaVerifyMerchant = async (merchant_id) => {\r\n\tconst url = API.MERCHANT_BASE_URL + \"/account/verify\";\r\n\r\n\tconsole.log(\"saga function\")\r\n\tconst merchant = {\r\n\t\taccount_id: merchant_id\r\n\t}\r\n\tconst data = await axios\r\n\t\t.post(url, merchant, config)\r\n\t\t.then((response) => {\r\n\t\t\tconsole.log(response.data)\r\n\t\t\treturn response.data;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err + \"Verify Merchant\");\r\n\t\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n// function* postCategory(payload) {\r\n// \ttry {\r\n// \t\tconst isCateAdded = yield call(sagaAddCategory, payload.category);\r\n// \t\tyield put(addCategorySuccess(isCateAdded));\r\n// \t} catch (err) {\r\n// \t\tconsole.log(err);\r\n// \t}\r\n// }\r\n\r\nfunction* getAllMechants() {\r\n\ttry {\r\n\t\tconst merchants = yield call(sagaFetchMerchants);\r\n\t\tyield put(actionSuccessGetAllMechants(merchants));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* verifyMerchant() {\r\n\ttry {\r\n\t\tconst merchants = yield call(sagaVerifyMerchant);\r\n\t\tyield put(actionSuccessVerifyMechant(merchants));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\n// function* deleteCategory(payload) {\r\n// \ttry {\r\n// \t\tconst isDeleted = yield call(sagaDeleteCategories, payload.id);\r\n// \t\tyield put(deleteCategorySuccess(isDeleted));\r\n// \t} catch (err) {\r\n// \t\tconsole.log(err);\r\n// \t}\r\n// }\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.GET_ALL_MERCHANTS, getAllMechants)]);\r\n\tyield all([takeEvery(actionTypes.VERIFY_MERCHANT, verifyMerchant)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}