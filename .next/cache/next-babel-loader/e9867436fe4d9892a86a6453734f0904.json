{"ast":null,"code":"import axios from \"axios\";\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { API, whoami } from \"../API/Api\";\nimport { actionAdminFetchAuctionsSuccess, actionApproveEventSuccess, actionCreateBidEventSuccess, actionTypes } from \"./action\";\nconst config = {\n  headers: {\n    Authorization: \"Bearer \" + API.TOKEN\n  }\n};\n\nconst modalAuctionCreated = type => {\n  notification[type]({\n    message: \"Auction Created\",\n    description: \"Auction Created Successfully\"\n  });\n}; //POST CREAT BID EVENT\n\n\nconst sagaCreateBidEvent = async event => {\n  console.log(\"saga func\");\n  const url = API.MERCHANT_MERCHANT_BASE_URL + \"/bidding\";\n  const config = {\n    headers: {\n      Authorization: \"Bearer \" + API.TOKEN\n    }\n  };\n  const data = axios.post(url, event, config).then(response => {\n    console.log(response.data);\n    return response.data;\n  });\n  return data;\n}; //GET MERCHANT BIDDING EVENT\n\n\nconst sagaAdminFetchBidEvent = async status => {\n  let data;\n  const merchant = await whoami(API.TOKEN);\n  const user = merchant.merchant.id;\n\n  if (status === \"pending\") {\n    const url = API.MERCHANT_BASE_URL + \"/bidding/\" + user;\n    console.log(status);\n    data = axios.get(url, config).then(response => {\n      const pendingBids = response.data.bidding_event.filter(bid => {\n        return bid.approved === false;\n      });\n      return pendingBids;\n    });\n  } else if (status === \"approved\") {\n    const url = API.MERCHANT_BASE_URL + \"/bidding/\" + user;\n    console.log(status);\n    data = axios.get(url, config).then(response => {\n      console.log(response.data.bidding_event);\n      const approvedBids = response.data.bidding_event.filter(bid => {\n        return bid.approved === true;\n      });\n      return approvedBids;\n    });\n  } else {\n    const url = API.MERCHANT_BASE_URL + \"/bidding/status\";\n    const eventStatus = {\n      status\n    };\n    console.log(eventStatus);\n    data = axios.post(url, eventStatus, config).then(response => {\n      console.log(response.data);\n      return response.data.bidding_event;\n    });\n  }\n\n  return data;\n}; // const sagaApproveBidEvent = async (event_id) => {\n// \tconsole.log(\"saga func\");\n// \tconst url = API.MERCHANT_BASE_URL + \"/bidding/approve/\" + event_id;\n// \tconst config = {\n// \t\theaders: {\n// \t\t\tAuthorization: \"Bearer \" + API.TOKEN,\n// \t\t},\n// \t};\n// \tconsole.log(url);\n// \tconst data = axios.post(url, event_id, config).then((response) => {\n// \t\tconsole.log(response.data);\n// \t\treturn response.data;\n// \t});\n// \treturn data;\n// };\n//\n\n\nfunction* createBidEvent(payload) {\n  try {\n    const isEventAdded = yield call(sagaCreateBidEvent, payload.event);\n    yield put(actionCreateBidEventSuccess(isEventAdded));\n    modalAuctionCreated(\"success\");\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* adminFetchBidEvent(payload) {\n  try {\n    const getAllBidEvent = yield call(sagaAdminFetchBidEvent, payload.status);\n    console.log(getAllBidEvent);\n    yield put(actionAdminFetchAuctionsSuccess(getAllBidEvent));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* approveBidEvent(payload) {\n  try {\n    const isApproved = yield call(sagaApproveBidEvent, payload.event_id);\n    console.log(isApproved);\n    yield put(actionApproveEventSuccess(isApproved));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.CREATE_BID_EVENT, createBidEvent)]);\n  yield all([takeEvery(actionTypes.ADMIN_FETCH_BID_EVENTS, adminFetchBidEvent)]);\n  yield all([takeEvery(actionTypes.APPROVE_BID_EVENT, approveBidEvent)]);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/Merchant dashboard/merchant dashboard/store/bid/saga.js"],"names":["axios","all","call","put","takeEvery","API","whoami","actionAdminFetchAuctionsSuccess","actionApproveEventSuccess","actionCreateBidEventSuccess","actionTypes","config","headers","Authorization","TOKEN","modalAuctionCreated","type","notification","message","description","sagaCreateBidEvent","event","console","log","url","MERCHANT_MERCHANT_BASE_URL","data","post","then","response","sagaAdminFetchBidEvent","status","merchant","user","id","MERCHANT_BASE_URL","get","pendingBids","bidding_event","filter","bid","approved","approvedBids","eventStatus","createBidEvent","payload","isEventAdded","err","adminFetchBidEvent","getAllBidEvent","approveBidEvent","isApproved","sagaApproveBidEvent","event_id","rootSaga","CREATE_BID_EVENT","ADMIN_FETCH_BID_EVENTS","APPROVE_BID_EVENT"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { API, whoami } from \"../API/Api\";\r\nimport {\r\n\tactionAdminFetchAuctionsSuccess,\r\n\tactionApproveEventSuccess,\r\n\tactionCreateBidEventSuccess,\r\n\tactionTypes,\r\n} from \"./action\";\r\n\r\nconst config = {\r\n\theaders: {\r\n\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t},\r\n};\r\n\r\nconst modalAuctionCreated = (type) => {\r\n\tnotification[type]({\r\n\t\tmessage: \"Auction Created\",\r\n\t\tdescription: \"Auction Created Successfully\",\r\n\t});\r\n};\r\n\r\n//POST CREAT BID EVENT\r\nconst sagaCreateBidEvent = async (event) => {\r\n\tconsole.log(\"saga func\");\r\n\tconst url = API.MERCHANT_MERCHANT_BASE_URL + \"/bidding\";\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\tconst data = axios.post(url, event, config).then((response) => {\r\n\t\tconsole.log(response.data);\r\n\t\treturn response.data;\r\n\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n//GET MERCHANT BIDDING EVENT\r\nconst sagaAdminFetchBidEvent = async (status) => {\r\n\tlet data;\r\n\t\r\n\tconst merchant = await whoami(API.TOKEN);\r\n\tconst user =  merchant.merchant.id\r\n\tif (status === \"pending\") {\r\n\t\tconst url = API.MERCHANT_BASE_URL + \"/bidding/\"+user;\r\n\r\n\t\tconsole.log(status);\r\n\t\tdata = axios.get(url, config).then((response) => {\r\n\t\t\tconst pendingBids = response.data.bidding_event.filter((bid) => {\r\n\t\t\t\treturn bid.approved === false;\r\n\t\t\t});\r\n\t\t\treturn pendingBids;\r\n\t\t});\r\n\t} else if (status === \"approved\") {\r\n\t\tconst url = API.MERCHANT_BASE_URL + \"/bidding/\"+user;\r\n\r\n\t\tconsole.log(status);\r\n\t\tdata = axios.get(url, config).then((response) => {\r\n\t\t\tconsole.log(response.data.bidding_event)\r\n\t\t\tconst approvedBids = response.data.bidding_event.filter((bid) => {\r\n\t\t\t\treturn bid.approved === true;\r\n\t\t\t});\r\n\t\t\treturn approvedBids;\r\n\t\t});\r\n\t} else {\r\n\t\tconst url = API.MERCHANT_BASE_URL + \"/bidding/status\";\r\n\r\n\t\tconst eventStatus = {\r\n\t\t\tstatus,\t\r\n\t\t};\r\n\r\n\t\tconsole.log(eventStatus);\r\n\t\tdata = axios.post(url, eventStatus, config).then((response) => {\r\n\t\t\tconsole.log(response.data);\r\n\t\t\treturn response.data.bidding_event;\r\n\t\t});\r\n\t}\r\n\r\n\treturn data;\r\n};\r\n\r\n// const sagaApproveBidEvent = async (event_id) => {\r\n// \tconsole.log(\"saga func\");\r\n// \tconst url = API.MERCHANT_BASE_URL + \"/bidding/approve/\" + event_id;\r\n// \tconst config = {\r\n// \t\theaders: {\r\n// \t\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n// \t\t},\r\n// \t};\r\n// \tconsole.log(url);\r\n// \tconst data = axios.post(url, event_id, config).then((response) => {\r\n// \t\tconsole.log(response.data);\r\n// \t\treturn response.data;\r\n// \t});\r\n\r\n// \treturn data;\r\n// };\r\n\r\n//\r\nfunction* createBidEvent(payload) {\r\n\ttry {\r\n\t\tconst isEventAdded = yield call(sagaCreateBidEvent, payload.event);\r\n\t\tyield put(actionCreateBidEventSuccess(isEventAdded));\r\n\t\tmodalAuctionCreated(\"success\")\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* adminFetchBidEvent(payload) {\r\n\ttry {\r\n\t\tconst getAllBidEvent = yield call(sagaAdminFetchBidEvent, payload.status);\r\n\t\tconsole.log(getAllBidEvent)\r\n\t\tyield put(actionAdminFetchAuctionsSuccess(getAllBidEvent));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* approveBidEvent(payload) {\r\n\ttry {\r\n\t\tconst isApproved = yield call(sagaApproveBidEvent, payload.event_id);\r\n\t\tconsole.log(isApproved);\r\n\t\tyield put(actionApproveEventSuccess(isApproved));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.CREATE_BID_EVENT, createBidEvent)]);\r\n\tyield all([\r\n\t\ttakeEvery(actionTypes.ADMIN_FETCH_BID_EVENTS, adminFetchBidEvent),\r\n\t]);\r\n\tyield all([takeEvery(actionTypes.APPROVE_BID_EVENT, approveBidEvent)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}