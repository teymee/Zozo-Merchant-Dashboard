{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(postProduct),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { notification } from \"antd\";\nimport { actionTypes, addProduct, addProductSuccess, fetchPRODUCTSuccess, deletePRODUCTSuccess } from \"./action\";\nimport axios from \"axios\";\nimport { API } from \"../API/Api\"; // POST PRODUCT\n\nvar sagaAddProduct = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(product) {\n    var url, config, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = API.MERCHANT_BASE_URL + \"/product/add\";\n            config = {\n              headers: {\n                Authorization: \"Bearer\" + API.TOKEN\n              }\n            };\n            _context.next = 4;\n            return axios.post(url, product, config).then(function (response) {\n              console.log(\"saga add product\" + response);\n              return response.data.product.name;\n            })[\"catch\"](function (err) {\n              alert(err + 'adding product saga');\n            });\n\n          case 4:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function sagaAddProduct(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); //\n\n\nfunction postProduct(payload) {\n  var isProductAdded;\n  return _regeneratorRuntime.wrap(function postProduct$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(sagaAddProduct, payload.product);\n\n        case 3:\n          isProductAdded = _context2.sent;\n          _context2.next = 6;\n          return put(addProductSuccess(isProductAdded));\n\n        case 6:\n          _context2.next = 11;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          alert(_context2.t0 + 'adding product saga');\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery(actionTypes.PRODUCT_POST, postProduct)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/product/saga.js"],"names":["postProduct","rootSaga","all","call","put","takeEvery","notification","actionTypes","addProduct","addProductSuccess","fetchPRODUCTSuccess","deletePRODUCTSuccess","axios","API","sagaAddProduct","product","url","MERCHANT_BASE_URL","config","headers","Authorization","TOKEN","post","then","response","console","log","data","name","err","alert","payload","isProductAdded","PRODUCT_POST"],"mappings":";;;oDAiCUA,W;qDASeC,Q;;AA1CzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAASC,YAAT,QAA6B,MAA7B;AAEA,SACCC,WADD,EAECC,UAFD,EAGCC,iBAHD,EAICC,mBAJD,EAKCC,oBALD,QAMO,UANP;AAOA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,YAApB,C,CAEA;;AACA,IAAMC,cAAc;AAAA,sEAAG,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,YAAAA,GADgB,GACVH,GAAG,CAACI,iBAAJ,GAAwB,cADd;AAEhBC,YAAAA,MAFgB,GAEP;AACdC,cAAAA,OAAO,EAAE;AACRC,gBAAAA,aAAa,EAAE,WAAWP,GAAG,CAACQ;AADtB;AADK,aAFO;AAAA;AAAA,mBAQHT,KAAK,CAACU,IAAN,CAAWN,GAAX,EAAgBD,OAAhB,EAAyBG,MAAzB,EAAiCK,IAAjC,CAAsC,UAACC,QAAD,EAAc;AACtEC,cAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBF,QAAjC;AACA,qBAAOA,QAAQ,CAACG,IAAT,CAAcZ,OAAd,CAAsBa,IAA7B;AACA,aAHkB,WAGV,UAACC,GAAD,EAAO;AACLC,cAAAA,KAAK,CAACD,GAAG,GAAG,qBAAP,CAAL;AACL,aALa,CARG;;AAAA;AAQhBF,YAAAA,IARgB;AAAA,6CAcfA,IAde;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdb,cAAc;AAAA;AAAA;AAAA,GAApB,C,CAiBA;;;AAEA,SAAUd,WAAV,CAAsB+B,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEyB,iBAAM5B,IAAI,CAACW,cAAD,EAAiBiB,OAAO,CAAChB,OAAzB,CAAV;;AAFzB;AAEQiB,UAAAA,cAFR;AAAA;AAGE,iBAAM5B,GAAG,CAACK,iBAAiB,CAACuB,cAAD,CAAlB,CAAT;;AAHF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKEF,UAAAA,KAAK,CAAC,eAAM,qBAAP,CAAL;;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,eAAe,SAAU7B,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,iBAAMC,GAAG,CAAC,CAACG,SAAS,CAACE,WAAW,CAAC0B,YAAb,EAA2BjC,WAA3B,CAAV,CAAD,CAAT;;AADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { notification } from \"antd\";\r\n\r\nimport {\r\n\tactionTypes,\r\n\taddProduct,\r\n\taddProductSuccess,\r\n\tfetchPRODUCTSuccess,\r\n\tdeletePRODUCTSuccess,\r\n} from \"./action\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../API/Api\";\r\n\r\n// POST PRODUCT\r\nconst sagaAddProduct = async (product) => {\r\n\tconst url = API.MERCHANT_BASE_URL + \"/product/add\";\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\r\n\tconst data = await axios.post(url, product, config).then((response) => {\r\n\t\tconsole.log(\"saga add product\" + response);\r\n\t\treturn response.data.product.name;\r\n\t}).catch((err)=>{\r\n            alert(err + 'adding product saga')\r\n      });\r\n\treturn data;\r\n};\r\n\r\n//\r\n\r\nfunction* postProduct(payload) {\r\n\ttry {\r\n\t\tconst isProductAdded = yield call(sagaAddProduct, payload.product);\r\n\t\tyield put(addProductSuccess(isProductAdded));\r\n\t}catch (err) {\r\n\t\talert(err + 'adding product saga');\r\n\t}\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.PRODUCT_POST, postProduct)]);\r\n\t// yield all([takeEvery(actionTypes.PRODUCT_GET, getPRODUCT)]);\r\n\t// yield all([takeEvery(actionTypes.PRODUCT_DELETE, deletePRODUCT)]);\r\n\t// yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}