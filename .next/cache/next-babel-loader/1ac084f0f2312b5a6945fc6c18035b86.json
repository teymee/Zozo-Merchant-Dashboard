{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/node_modules/next/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(postCategory),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport { actionTypes, addCategory } from './action';\nimport axios from 'axios';\nimport { API } from '../API/Api';\n\nvar sagaAddCategory = function sagaAddCategory(cate) {\n  console.log(cate);\n  var url = API.ADMIN_BASE_URL + '/category/create';\n  var config = {\n    headers: {\n      'Authorization': API.TOKEN\n    }\n  };\n  axios.post(url, cate, config);\n};\n\nfunction postCategory(payload) {\n  var isCatAdded;\n  return _regeneratorRuntime.wrap(function postCategory$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(sagaAddCategory, payload.category);\n\n        case 3:\n          isCatAdded = _context.sent;\n          _context.next = 9;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 6]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return all([takeEvery(actionTypes.CATEGORY_POST, postCategory)]);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/category/saga.js"],"names":["postCategory","rootSaga","all","call","put","takeEvery","notification","actionTypes","addCategory","axios","API","sagaAddCategory","cate","console","log","url","ADMIN_BASE_URL","config","headers","TOKEN","post","payload","category","isCatAdded","CATEGORY_POST"],"mappings":";;oDAqBUA,Y;qDAQeC,Q;;AA7BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAASC,YAAT,QAA6B,MAA7B;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,UAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,YAApB;;AAGA,IAAMC,eAAe,GAAE,SAAjBA,eAAiB,CAACC,IAAD,EAAQ;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEA,MAAMG,GAAG,GAAGL,GAAG,CAACM,QAAJ,GAAe,kBAA3B;AACA,MAAMC,MAAM,GAAG;AACTC,IAAAA,OAAO,EAAC;AACF,uBAAgBR,GAAG,CAACS;AADlB;AADC,GAAf;AAKAV,EAAAA,KAAK,CAACW,IAAN,CAAWL,GAAX,EAAeH,IAAf,EAAoBK,MAApB;AAEL,CAXD;;AAaA,SAAUjB,YAAV,CAAwBqB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEyB,iBAAMlB,IAAI,CAACQ,eAAD,EAAkBU,OAAO,CAACC,QAA1B,CAAV;;AAFzB;AAEYC,UAAAA,UAFZ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIMV,UAAAA,OAAO,CAACC,GAAR;;AAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,eAAe,SAAUb,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACT,iBAAMC,GAAG,CAAC,CAACG,SAAS,CAACE,WAAW,CAACiB,aAAb,EAA4BxB,YAA5B,CAAV,CAAD,CAAT;;AADS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, put, takeEvery } from 'redux-saga/effects';\r\nimport { notification } from 'antd';\r\n\r\nimport { actionTypes, addCategory } from './action';\r\nimport axios from 'axios';\r\nimport { API } from '../API/Api';\r\n\r\n\r\nconst sagaAddCategory= (cate)=>{\r\n      console.log(cate)\r\n\r\n      const url = API.ADMIN_BASE_URL + '/category/create'\r\n      const config = {\r\n            headers:{\r\n                  'Authorization':API.TOKEN\r\n            }\r\n      }\r\n      axios.post(url,cate,config)\r\n\r\n}\r\n\r\nfunction* postCategory (payload){\r\ntry{\r\n      const isCatAdded = yield call(sagaAddCategory, payload.category)\r\n}catch (err){\r\n      console.log(err)\r\n}\r\n}\r\n\r\nexport default function* rootSaga() {\r\n      yield all([takeEvery(actionTypes.CATEGORY_POST, postCategory)]);\r\n      // yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\r\n  }"]},"metadata":{},"sourceType":"module"}