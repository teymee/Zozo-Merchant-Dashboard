{"ast":null,"code":"import axios from \"axios\";\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { API } from \"../API/Api\";\nimport { actionAdminFetchPendingSuccess, actionApproveEventSuccess, actionCreateBidEventSuccess, actionTypes } from \"./action\"; //POST CREAT BID EVENT\n\nconst sagaCreateBidEvent = async event => {\n  console.log(\"saga func\");\n  const url = API.MERCHANT_MERCHANT_BASE_URL + \"/bidding\";\n  const config = {\n    headers: {\n      Authorization: \"Bearer \" + API.TOKEN\n    }\n  };\n  const data = axios.post(url, event, config).then(response => {\n    console.log(response.data);\n    return response.data;\n  });\n  return data;\n};\n\nconst sagaAdminFetchPendingBidEvent = async () => {\n  const url = API.MERCHANT_BASE_URL + \"/bidding\";\n  const config = {\n    headers: {\n      Authorization: \"Bearer\" + API.TOKEN\n    }\n  };\n  const data = axios.get(url, config).then(response => {\n    console.log(response.data);\n    return response.data;\n  });\n  return data;\n};\n\nconst sagaApproveBidEvent = async event_id => {\n  console.log(\"saga func\");\n  const url = API.MERCHANT_MERCHANT_BASE_URL + \"/bidding/approve/\" + event_id;\n  const config = {\n    headers: {\n      Authorization: \"Bearer \" + API.TOKEN\n    }\n  };\n  const data = axios.post(url, event_id, config).then(response => {\n    console.log(response.data);\n    return response.data;\n  });\n  return data;\n};\n\nfunction* createBidEvent(payload) {\n  try {\n    const isEventAdded = yield call(sagaCreateBidEvent, payload.event);\n    yield put(actionCreateBidEventSuccess(isEventAdded));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* adminFetchBidEvent(payload) {\n  try {\n    const getAllBidEvent = yield call(sagaAdminFetchPendingBidEvent, payload.event);\n    yield put(actionAdminFetchPendingSuccess(getAllBidEvent.bidding_event));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* approveBidEvent(payload) {\n  try {\n    const isApproved = yield call(sagaApproveBidEvent, payload.event_id);\n    console.log(isApproved);\n    yield put(actionApproveEventSuccess(isApproved));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.CREATE_BID_EVENT, createBidEvent)]);\n  yield all([takeEvery(actionTypes.ADMIN_FETCH_PENDING_BID_EVENT, adminFetchBidEvent)]);\n  yield all([takeEvery(actionTypes.APPROVE_BID_EVENT, approveBidEvent)]);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/bid/saga.js"],"names":["axios","all","call","put","takeEvery","API","actionAdminFetchPendingSuccess","actionApproveEventSuccess","actionCreateBidEventSuccess","actionTypes","sagaCreateBidEvent","event","console","log","url","MERCHANT_MERCHANT_BASE_URL","config","headers","Authorization","TOKEN","data","post","then","response","sagaAdminFetchPendingBidEvent","MERCHANT_BASE_URL","get","sagaApproveBidEvent","event_id","createBidEvent","payload","isEventAdded","err","adminFetchBidEvent","getAllBidEvent","bidding_event","approveBidEvent","isApproved","rootSaga","CREATE_BID_EVENT","ADMIN_FETCH_PENDING_BID_EVENT","APPROVE_BID_EVENT"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { API } from \"../API/Api\";\r\nimport {\r\n\tactionAdminFetchPendingSuccess,\r\n\tactionApproveEventSuccess,\r\n\tactionCreateBidEventSuccess,\r\n\tactionTypes,\r\n} from \"./action\";\r\n\r\n//POST CREAT BID EVENT\r\nconst sagaCreateBidEvent = async (event) => {\r\n\tconsole.log(\"saga func\");\r\n\tconst url = API.MERCHANT_MERCHANT_BASE_URL + \"/bidding\";\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\tconst data = axios.post(url, event, config).then((response) => {\r\n\t\tconsole.log(response.data);\r\n\t\treturn response.data;\r\n\t});\r\n\r\n\treturn data;\r\n};\r\n\r\nconst sagaAdminFetchPendingBidEvent = async () => {\r\n\tconst url = API.MERCHANT_BASE_URL + \"/bidding\";\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\r\n\tconst data = axios.get(url, config).then((response) => {\r\n\t\tconsole.log(response.data);\r\n\t\treturn response.data;\r\n\t});\r\n\r\n\treturn data;\r\n};\r\n\r\nconst sagaApproveBidEvent = async (event_id) => {\r\n\tconsole.log(\"saga func\");\r\n\tconst url = API.MERCHANT_MERCHANT_BASE_URL + \"/bidding/approve/\" + event_id;\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\tconst data = axios.post(url, event_id, config).then((response) => {\r\n\t\tconsole.log(response.data);\r\n\t\treturn response.data;\r\n\t});\r\n\r\n\treturn data;\r\n};\r\n\r\nfunction* createBidEvent(payload) {\r\n\ttry {\r\n\t\tconst isEventAdded = yield call(sagaCreateBidEvent, payload.event);\r\n\t\tyield put(actionCreateBidEventSuccess(isEventAdded));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* adminFetchBidEvent(payload) {\r\n\ttry {\r\n\t\tconst getAllBidEvent = yield call(\r\n\t\t\tsagaAdminFetchPendingBidEvent,\r\n\t\t\tpayload.event\r\n\t\t);\r\n\t\tyield put(actionAdminFetchPendingSuccess(getAllBidEvent.bidding_event));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* approveBidEvent(payload) {\r\n\ttry {\r\n\t\tconst isApproved = yield call(sagaApproveBidEvent, payload.event_id);\r\n            console.log(isApproved)\r\n\t\tyield put(actionApproveEventSuccess(isApproved));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.CREATE_BID_EVENT, createBidEvent)]);\r\n\tyield all([\r\n\t\ttakeEvery(actionTypes.ADMIN_FETCH_PENDING_BID_EVENT, adminFetchBidEvent),\r\n\t]);\r\n\tyield all([takeEvery(actionTypes.APPROVE_BID_EVENT, approveBidEvent)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}