{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Downloads/Gigs/Zozo/Merchant dashboard/merchant dashboard/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/HP/Downloads/Gigs/Zozo/Merchant dashboard/merchant dashboard/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(postProduct),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(getMerchantProduct),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { notification } from \"antd\";\nimport { actionTypes, addProduct, addProductSuccess, fetchPRODUCTSuccess, deletePRODUCTSuccess, getMerchantProductSuccess } from \"./action\";\nimport axios from \"axios\";\nimport { API } from \"../API/Api\";\nvar config = {\n  headers: {\n    Authorization: \"Bearer\" + API.TOKEN\n  }\n};\n\nvar modalSuccess = function modalSuccess(type) {\n  notification[type]({\n    message: \"Successful\",\n    description: \"Product Added successful!\"\n  });\n}; // POST PRODUCT\n\n\nvar sagaAddProduct = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(product) {\n    var user, url, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            user = API.WH;\n            url = API.MERCHANT_MERCHANT_BASE_URL + \"/product/add\";\n            _context.next = 4;\n            return axios.post(url, product, config).then(function (response) {\n              console.log(\"saga add product\" + response);\n              return response.data.product.name;\n            });\n\n          case 4:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function sagaAddProduct(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); //GET SPECIFIC MERCHANT'S PRODUCT\n\n\nvar sagaGetMerchantProducts = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n    var url, config, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = API.MERCHANT_MERCHANT_BASE_URL + \"/product/all/\" + id;\n            config = {\n              headers: {\n                Authorization: \"Bearer\" + API.TOKEN\n              }\n            };\n            _context2.next = 4;\n            return axios.get(url, config).then(function (response) {\n              return response.data.products;\n            });\n\n          case 4:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function sagaGetMerchantProducts(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nfunction postProduct(payload) {\n  var isProductAdded;\n  return _regeneratorRuntime.wrap(function postProduct$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(sagaAddProduct, payload.product);\n\n        case 3:\n          isProductAdded = _context3.sent;\n          _context3.next = 6;\n          return put(addProductSuccess(isProductAdded));\n\n        case 6:\n          modalSuccess(\"success\");\n          _context3.next = 12;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0 + \"adding product saga\");\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction getMerchantProduct(payload) {\n  var merchantProducts;\n  return _regeneratorRuntime.wrap(function getMerchantProduct$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(sagaGetMerchantProducts, payload.id);\n\n        case 3:\n          merchantProducts = _context4.sent;\n          _context4.next = 6;\n          return put(getMerchantProductSuccess(merchantProducts));\n\n        case 6:\n          _context4.next = 11;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(_context4.t0 + \"getting merchant product saga\"); // alert(err + \"getting merchant product saga\");\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([takeEvery(actionTypes.PRODUCT_POST, postProduct)]);\n\n        case 2:\n          _context5.next = 4;\n          return all([takeEvery(actionTypes.MERCHANT_PRODUCT_GET, getMerchantProduct)]);\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/Merchant dashboard/merchant dashboard/store/product/saga.js"],"names":["postProduct","getMerchantProduct","rootSaga","all","call","put","takeEvery","notification","actionTypes","addProduct","addProductSuccess","fetchPRODUCTSuccess","deletePRODUCTSuccess","getMerchantProductSuccess","axios","API","config","headers","Authorization","TOKEN","modalSuccess","type","message","description","sagaAddProduct","product","user","WH","url","MERCHANT_MERCHANT_BASE_URL","post","then","response","console","log","data","name","sagaGetMerchantProducts","id","get","products","payload","isProductAdded","merchantProducts","PRODUCT_POST","MERCHANT_PRODUCT_GET"],"mappings":"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","sourcesContent":["import { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { notification } from \"antd\";\r\n\r\nimport {\r\n\tactionTypes,\r\n\taddProduct,\r\n\taddProductSuccess,\r\n\tfetchPRODUCTSuccess,\r\n\tdeletePRODUCTSuccess,\r\n      getMerchantProductSuccess,\r\n} from \"./action\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../API/Api\";\r\n\r\nconst config = {\r\n\theaders: {\r\n\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t},\r\n}; \r\nconst modalSuccess = (type) => {\r\n\tnotification[type]({\r\n\t\tmessage: \"Successful\",\r\n\t\tdescription: \"Product Added successful!\",\r\n\t});\r\n};\r\n\r\n// POST PRODUCT\r\nconst sagaAddProduct = async (product) => {\r\n\r\n\tconst user = API.WH\r\n\r\n\tconst url = API.MERCHANT_MERCHANT_BASE_URL + \"/product/add\";\r\n\t\r\n\r\n\tconst data = await axios\r\n\t\t.post(url, product, config)\r\n\t\t.then((response) => {\r\n\t\t\tconsole.log(\"saga add product\" + response);\r\n\t\t\treturn response.data.product.name;\r\n\t\t})\r\n\treturn data;\r\n};\r\n\r\n\r\n\r\n//GET SPECIFIC MERCHANT'S PRODUCT\r\nconst sagaGetMerchantProducts = async (id) => {\r\n\tconst url = API.MERCHANT_MERCHANT_BASE_URL + \"/product/all/\" + id;\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\r\n\tconst data =  await axios.get(url, config).then((response)=>{\r\n           \r\n            return response.data.products\r\n      });\r\n\r\n      return data\r\n};\r\n\r\nfunction* postProduct(payload) {\r\n\ttry {\r\n\t\tconst isProductAdded = yield call(sagaAddProduct, payload.product);\r\n\t\tyield put(addProductSuccess(isProductAdded));\r\n\t\tmodalSuccess(\"success\");\r\n\t} catch (err) {\r\n\t\tconsole.log(err + \"adding product saga\");\r\n\t}\r\n}\r\n\r\nfunction* getMerchantProduct(payload) {\r\n\ttry {\r\n\t\tconst merchantProducts = yield call(sagaGetMerchantProducts, payload.id);\r\n\t\tyield put(getMerchantProductSuccess(merchantProducts));\r\n\t} catch (err) {\r\n            console.log(err + \"getting merchant product saga\");\r\n\t\t// alert(err + \"getting merchant product saga\");\r\n\t}\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.PRODUCT_POST, postProduct)]);\r\n\tyield all([takeEvery(actionTypes.MERCHANT_PRODUCT_GET, getMerchantProduct)]);\r\n\t// yield all([takeEvery(actionTypes.PRODUCT_DELETE, deletePRODUCT)]);\r\n\t// yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}