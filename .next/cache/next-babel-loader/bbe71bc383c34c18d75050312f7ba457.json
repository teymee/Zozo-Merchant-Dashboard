{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getAllMechants),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(verifyMerchant),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(upgradeMerchant),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { notification } from \"antd\";\nimport { actionTypes, actionGetAllMechants, actionSuccessGetAllMechants, actionSuccessVerifyMechant } from \"./action\";\nimport axios from \"axios\";\nimport { API } from \"../API/Api\"; // NEW\n\nvar config = {\n  headers: {\n    Authorization: \"Bearer\" + API.TOKEN\n  }\n}; //FETCH ALL MERCHANTS\n\nvar sagaFetchMerchants = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var url, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = API.ADMIN_BASE_URL + \"/merchant\";\n            _context.next = 3;\n            return axios.get(url, config).then(function (response) {\n              return response.data.merchant;\n            })[\"catch\"](function (err) {\n              console.log(err + \"fetching merchants\");\n            });\n\n          case 3:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function sagaFetchMerchants() {\n    return _ref.apply(this, arguments);\n  };\n}(); //VERIFY ALL ACCOUNT\n\n\nvar sagaVerifyMerchant = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n    var url, user, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = API.ADMIN_BASE_URL + \"/account/verify\";\n            user = {\n              account_id: id.toString()\n            };\n            console.log(merchant);\n            _context2.next = 5;\n            return axios.post(url, merchant, config).then(function (response) {\n              console.log(response.data);\n              return response.data;\n            })[\"catch\"](function (err) {\n              console.log(err + \"Verify Merchant\");\n            });\n\n          case 5:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function sagaVerifyMerchant(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}(); //UPGRADE CUSTOMER\n\n\nvar sagaUpgradeMerchant = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(merchant_id) {\n    var url, merchant, data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            url = API.ADMIN_BASE_URL + \"/admin/upgrade\";\n            merchant = {\n              account_id: merchant_id.toString()\n            };\n            _context3.next = 4;\n            return axios.post(url, merchant, config).then(function (response) {\n              console.log(response.data);\n              return response.data;\n            });\n\n          case 4:\n            data = _context3.sent;\n            return _context3.abrupt(\"return\", data);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function sagaUpgradeMerchant(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}(); // function* postCategory(payload) {\n// \ttry {\n// \t\tconst isCateAdded = yield call(sagaAddCategory, payload.category);\n// \t\tyield put(addCategorySuccess(isCateAdded));\n// \t} catch (err) {\n// \t\tconsole.log(err);\n// \t}\n// }\n\n\nfunction getAllMechants() {\n  var merchants;\n  return _regeneratorRuntime.wrap(function getAllMechants$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(sagaFetchMerchants);\n\n        case 3:\n          merchants = _context4.sent;\n          _context4.next = 6;\n          return put(actionSuccessGetAllMechants(merchants));\n\n        case 6:\n          _context4.next = 11;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(_context4.t0);\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction verifyMerchant(payload) {\n  var merchants;\n  return _regeneratorRuntime.wrap(function verifyMerchant$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(sagaVerifyMerchant, payload.merchant_id);\n\n        case 3:\n          merchants = _context5.sent;\n          _context5.next = 6;\n          return put(actionSuccessVerifyMechant(merchants));\n\n        case 6:\n          _context5.next = 11;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.log(_context5.t0);\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction upgradeMerchant(payload) {\n  var isUpgraded;\n  return _regeneratorRuntime.wrap(function upgradeMerchant$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(sagaUpgradeMerchant, payload.merchant_id);\n\n        case 3:\n          isUpgraded = _context6.sent;\n          _context6.next = 6;\n          return put(actionUpgradeMerchantSuccess(isUpgraded));\n\n        case 6:\n          _context6.next = 11;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.log(_context6.t0);\n\n        case 11:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n} // function* deleteCategory(payload) {\n// \ttry {\n// \t\tconst isDeleted = yield call(sagaDeleteCategories, payload.id);\n// \t\tyield put(deleteCategorySuccess(isDeleted));\n// \t} catch (err) {\n// \t\tconsole.log(err);\n// \t}\n// }\n\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([takeEvery(actionTypes.GET_ALL_MERCHANTS, getAllMechants)]);\n\n        case 2:\n          _context7.next = 4;\n          return all([takeEvery(actionTypes.VERIFY_MERCHANT, verifyMerchant)]);\n\n        case 4:\n          _context7.next = 6;\n          return all([takeEvery(actionTypes.UPGRADE_MERCHANT, upgradeMerchant)]);\n\n        case 6:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/merchant/saga.js"],"names":["getAllMechants","verifyMerchant","upgradeMerchant","rootSaga","all","call","put","takeEvery","notification","actionTypes","actionGetAllMechants","actionSuccessGetAllMechants","actionSuccessVerifyMechant","axios","API","config","headers","Authorization","TOKEN","sagaFetchMerchants","url","ADMIN_BASE_URL","get","then","response","data","merchant","err","console","log","sagaVerifyMerchant","id","user","account_id","toString","post","sagaUpgradeMerchant","merchant_id","merchants","payload","isUpgraded","actionUpgradeMerchantSuccess","GET_ALL_MERCHANTS","VERIFY_MERCHANT","UPGRADE_MERCHANT"],"mappings":"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","sourcesContent":["import { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { notification } from \"antd\";\r\n\r\nimport {\r\n\tactionTypes,\r\n\tactionGetAllMechants,\r\n\tactionSuccessGetAllMechants,\r\n\tactionSuccessVerifyMechant,\r\n} from \"./action\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../API/Api\";\r\n\r\n// NEW\r\n\r\nconst config = {\r\n\theaders: {\r\n\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t},\r\n};\r\n//FETCH ALL MERCHANTS\r\nconst sagaFetchMerchants = async () => {\r\n\tconst url = API.ADMIN_BASE_URL + \"/merchant\";\r\n\r\n\tconst data = await axios\r\n\t\t.get(url, config)\r\n\t\t.then((response) => {\r\n\t\t\treturn response.data.merchant;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err + \"fetching merchants\");\r\n\t\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n//VERIFY ALL ACCOUNT\r\nconst sagaVerifyMerchant = async (id) => {\r\n\tconst url = API.ADMIN_BASE_URL + \"/account/verify\";\r\n\r\n\t\r\n\tconst user = {\r\n\t\taccount_id: id.toString()\r\n\t}\r\n\tconsole.log(merchant)\r\n\tconst data = await axios\r\n\t\t.post(url, merchant, config)\r\n\t\t.then((response) => {\r\n\t\t\tconsole.log(response.data)\r\n\t\t\treturn response.data;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err + \"Verify Merchant\");\r\n\t\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n//UPGRADE CUSTOMER\r\nconst sagaUpgradeMerchant = async (merchant_id)=>{\r\n\tconst url = API.ADMIN_BASE_URL + \"/admin/upgrade\"\r\n\tconst merchant = {\r\n\t\taccount_id: merchant_id.toString()\r\n\t  }\r\n\tconst data = await axios.post(url, merchant, config).then((response)=>{\r\n\t\t\tconsole.log(response.data)\r\n\t\t\treturn response.data\r\n\t})\r\n\r\n\treturn data\r\n}\r\n// function* postCategory(payload) {\r\n// \ttry {\r\n// \t\tconst isCateAdded = yield call(sagaAddCategory, payload.category);\r\n// \t\tyield put(addCategorySuccess(isCateAdded));\r\n// \t} catch (err) {\r\n// \t\tconsole.log(err);\r\n// \t}\r\n// }\r\n\r\nfunction* getAllMechants() {\r\n\ttry {\r\n\t\tconst merchants = yield call(sagaFetchMerchants);\r\n\t\tyield put(actionSuccessGetAllMechants(merchants));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* verifyMerchant(payload) {\r\n\ttry {\r\n\t\tconst merchants = yield call(sagaVerifyMerchant, payload.merchant_id);\r\n\t\tyield put(actionSuccessVerifyMechant(merchants));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* upgradeMerchant(payload) {\r\n\ttry {\r\n\t\tconst isUpgraded = yield call(sagaUpgradeMerchant, payload.merchant_id);\r\n\t\tyield put(actionUpgradeMerchantSuccess(isUpgraded));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\n// function* deleteCategory(payload) {\r\n// \ttry {\r\n// \t\tconst isDeleted = yield call(sagaDeleteCategories, payload.id);\r\n// \t\tyield put(deleteCategorySuccess(isDeleted));\r\n// \t} catch (err) {\r\n// \t\tconsole.log(err);\r\n// \t}\r\n// }\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.GET_ALL_MERCHANTS, getAllMechants)]);\r\n\tyield all([takeEvery(actionTypes.VERIFY_MERCHANT, verifyMerchant)]);\r\n\tyield all([takeEvery(actionTypes.UPGRADE_MERCHANT, upgradeMerchant)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}