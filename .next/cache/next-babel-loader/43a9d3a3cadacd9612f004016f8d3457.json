{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getAllCustomers),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(getSingleCusto),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(upgradeCustomer),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { notification } from \"antd\";\nimport { actionTypes, actionGetAllCustomers, actionSuccessGetAllCustomers } from \"./action\";\nimport axios from \"axios\";\nimport { API } from \"../API/Api\"; // NEW\n\nvar config = {\n  headers: {\n    Authorization: \"Bearer\" + API.TOKEN\n  }\n}; //FETCH ALL CUSTOMERS\n\nvar sagaFetchCustomers = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var url, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = API.ADMIN_BASE_URL + \"/customer\";\n            _context.next = 3;\n            return axios.get(url, config).then(function (response) {\n              return response.data.customer;\n            })[\"catch\"](function (err) {\n              console.log(err + \"fetching Customers\");\n            });\n\n          case 3:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function sagaFetchCustomers() {\n    return _ref.apply(this, arguments);\n  };\n}(); //FETCH SINGLE MERCHANT\n\n\nvar sagaFetchSingleMerchant = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(merchant_id) {\n    var url, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = API.ADMIN_BASE_URL + \"/merchant/\" + merchant_id;\n            _context2.next = 3;\n            return axios.get(url, config).then(function (response) {\n              return response.data.merchant;\n            })[\"catch\"](function (err) {\n              console.log(err + \"fetching single merchant\");\n            });\n\n          case 3:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function sagaFetchSingleMerchant(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}(); //UPGRADE CUSTOMER\n\n\nvar sagaUpgradeCustomer = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(customer_id) {\n    var url, customer, data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            url = API.BASE_URL + \"/customer/upgrade\";\n            customer = {\n              account_id: customer_id.toString()\n            };\n            _context3.next = 4;\n            return axios.post(url, customer, config).then(function (response) {\n              console.log(response.data);\n              return response.data;\n            });\n\n          case 4:\n            data = _context3.sent;\n            return _context3.abrupt(\"return\", data);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function sagaUpgradeCustomer(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}(); // function* postCategory(payload) {\n// \ttry {\n// \t\tconst isCateAdded = yield call(sagaAddCategory, payload.category);\n// \t\tyield put(addCategorySuccess(isCateAdded));\n// \t} catch (err) {\n// \t\tconsole.log(err);\n// \t}\n// }\n\n\nfunction getAllCustomers() {\n  var Customers;\n  return _regeneratorRuntime.wrap(function getAllCustomers$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(sagaFetchCustomers);\n\n        case 3:\n          Customers = _context4.sent;\n          _context4.next = 6;\n          return put(actionSuccessGetAllCustomers(Customers));\n\n        case 6:\n          _context4.next = 11;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(_context4.t0);\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction getSingleCusto(_ref4) {\n  var merchant_id, merchant;\n  return _regeneratorRuntime.wrap(function getSingleCusto$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          merchant_id = _ref4.merchant_id;\n          _context5.prev = 1;\n          _context5.next = 4;\n          return call(sagaFetchSingleMerchant, merchant_id);\n\n        case 4:\n          merchant = _context5.sent;\n          _context5.next = 7;\n          return put(actionSuccessGetSingleCusto(merchant));\n\n        case 7:\n          _context5.next = 12;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](1);\n          console.log(_context5.t0);\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked2, null, [[1, 9]]);\n}\n\nfunction upgradeCustomer(payload) {\n  var isUpgraded;\n  return _regeneratorRuntime.wrap(function upgradeCustomer$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(sagaUpgradeCustomer, payload.customer_id);\n\n        case 3:\n          isUpgraded = _context6.sent;\n          _context6.next = 6;\n          return put(actionUpgradeCustomerSuccess(isUpgraded));\n\n        case 6:\n          _context6.next = 11;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.log(_context6.t0);\n\n        case 11:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n} // function* deleteCategory(payload) {\n// \ttry {\n// \t\tconst isDeleted = yield call(sagaDeleteCategories, payload.id);\n// \t\tyield put(deleteCategorySuccess(isDeleted));\n// \t} catch (err) {\n// \t\tconsole.log(err);\n// \t}\n// }\n\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([takeEvery(actionTypes.GET_ALL_CUSTOMERS, getAllCustomers)]);\n\n        case 2:\n          _context7.next = 4;\n          return all([takeEvery(actionTypes.GET_SINGLE_MERCHANT, getSingleCusto)]);\n\n        case 4:\n          _context7.next = 6;\n          return all([takeEvery(actionTypes.UPGRADE_CUSTOMER, upgradeCustomer)]);\n\n        case 6:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/customer/saga.js"],"names":["getAllCustomers","getSingleCusto","upgradeCustomer","rootSaga","all","call","put","takeEvery","notification","actionTypes","actionGetAllCustomers","actionSuccessGetAllCustomers","axios","API","config","headers","Authorization","TOKEN","sagaFetchCustomers","url","ADMIN_BASE_URL","get","then","response","data","customer","err","console","log","sagaFetchSingleMerchant","merchant_id","merchant","sagaUpgradeCustomer","customer_id","BASE_URL","account_id","toString","post","Customers","actionSuccessGetSingleCusto","payload","isUpgraded","actionUpgradeCustomerSuccess","GET_ALL_CUSTOMERS","GET_SINGLE_MERCHANT","UPGRADE_CUSTOMER"],"mappings":"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","sourcesContent":["\r\n\r\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { notification } from \"antd\";\r\n\r\nimport {\r\n\tactionTypes,\r\n\tactionGetAllCustomers,\r\n\tactionSuccessGetAllCustomers,\r\n} from \"./action\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../API/Api\";\r\n\r\n// NEW\r\n\r\nconst config = {\r\n\theaders: {\r\n\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t},\r\n};\r\n\r\n//FETCH ALL CUSTOMERS\r\nconst sagaFetchCustomers = async () => {\r\n\tconst url = API.ADMIN_BASE_URL + \"/customer\";\r\n\r\n\tconst data = await axios\r\n\t\t.get(url, config)\r\n\t\t.then((response) => {\r\n\t\t\treturn response.data.customer;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err + \"fetching Customers\");\r\n\t\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n//FETCH SINGLE MERCHANT\r\nconst sagaFetchSingleMerchant = async (merchant_id) => {\r\n\tconst url = API.ADMIN_BASE_URL + \"/merchant/\"+merchant_id;\r\n\r\n\tconst data = await axios\r\n\t\t.get(url, config)\r\n\t\t.then((response) => {\r\n\r\n\t\t\treturn response.data.merchant;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err + \"fetching single merchant\");\r\n\t\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n//UPGRADE CUSTOMER\r\nconst sagaUpgradeCustomer = async (customer_id)=>{\r\n\tconst url = API.BASE_URL + \"/customer/upgrade\"\r\n\tconst customer = {\r\n\t\taccount_id: customer_id.toString()\r\n\t  }\r\n\tconst data = await axios.post(url, customer, config).then((response)=>{\r\n\t\t\tconsole.log(response.data)\r\n\t\t\treturn response.data\r\n\t})\r\n\r\n\treturn data\r\n}\r\n\r\n// function* postCategory(payload) {\r\n// \ttry {\r\n// \t\tconst isCateAdded = yield call(sagaAddCategory, payload.category);\r\n// \t\tyield put(addCategorySuccess(isCateAdded));\r\n// \t} catch (err) {\r\n// \t\tconsole.log(err);\r\n// \t}\r\n// }\r\n\r\nfunction* getAllCustomers() {\r\n\ttry {\r\n\t\tconst Customers = yield call(sagaFetchCustomers);\r\n\t\tyield put(actionSuccessGetAllCustomers(Customers));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* getSingleCusto({merchant_id}) {\r\n\ttry {\r\n\t\tconst merchant = yield call(sagaFetchSingleMerchant, merchant_id);\r\n\t\tyield put(actionSuccessGetSingleCusto (merchant));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* upgradeCustomer(payload) {\r\n\ttry {\r\n\t\tconst isUpgraded = yield call(sagaUpgradeCustomer, payload.customer_id);\r\n\t\tyield put(actionUpgradeCustomerSuccess(isUpgraded));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n// function* deleteCategory(payload) {\r\n// \ttry {\r\n// \t\tconst isDeleted = yield call(sagaDeleteCategories, payload.id);\r\n// \t\tyield put(deleteCategorySuccess(isDeleted));\r\n// \t} catch (err) {\r\n// \t\tconsole.log(err);\r\n// \t}\r\n// }\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.GET_ALL_CUSTOMERS, getAllCustomers)]);\r\n\tyield all([takeEvery(actionTypes.GET_SINGLE_MERCHANT, getSingleCusto)]);\r\n\tyield all([takeEvery(actionTypes.UPGRADE_CUSTOMER, upgradeCustomer)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}