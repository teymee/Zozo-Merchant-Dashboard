{"ast":null,"code":"import { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { notification } from \"antd\";\nimport { actionTypes, actionGetAllCustomers, actionSuccessGetAllCustomers } from \"./action\";\nimport axios from \"axios\";\nimport { API } from \"../API/Api\"; // NEW\n\nconst config = {\n  headers: {\n    Authorization: \"Bearer\" + API.TOKEN\n  }\n}; //FETCH ALL CUSTOMERS\n\nconst sagaFetchCustomers = async () => {\n  const url = API.MERCHANT_BASE_URL + \"/customer\";\n  const data = await axios.get(url, config).then(response => {\n    return response.data.customer;\n  }).catch(err => {\n    console.log(err + \"fetching Customers\");\n  });\n  return data;\n}; //FETCH SINGLE MERCHANT\n\n\nconst sagaFetchSingleMerchant = async merchant_id => {\n  const url = API.MERCHANT_BASE_URL + \"/merchant/\" + merchant_id;\n  const data = await axios.get(url, config).then(response => {\n    return response.data.merchant;\n  }).catch(err => {\n    console.log(err + \"fetching single merchant\");\n  });\n  return data;\n}; //UPGRADE CUSTOMER\n\n\nconst sagaUpgradeCustomer = async customer_id => {\n  const url = API.BASE_URL + \"/customer/upgrade\";\n  const customer = {\n    account_id: customer_id.toString()\n  };\n  const data = await axios.post(url, customer, config).then(response => {\n    console.log(response.data);\n    return response.data;\n  });\n  return data;\n}; // function* postCategory(payload) {\n// \ttry {\n// \t\tconst isCateAdded = yield call(sagaAddCategory, payload.category);\n// \t\tyield put(addCategorySuccess(isCateAdded));\n// \t} catch (err) {\n// \t\tconsole.log(err);\n// \t}\n// }\n\n\nfunction* getAllCustomers() {\n  try {\n    const Customers = yield call(sagaFetchCustomers);\n    yield put(actionSuccessGetAllCustomers(Customers));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getSingleCusto({\n  merchant_id\n}) {\n  try {\n    const merchant = yield call(sagaFetchSingleMerchant, merchant_id);\n    yield put(actionSuccessGetSingleCusto(merchant));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* upgradeCustomer(payload) {\n  try {\n    const isUpgraded = yield call(sagaUpgradeCustomer, payload.customer_id);\n    yield put(actionUpgradeCustomerSuccess(isUpgraded));\n  } catch (err) {\n    console.log(err);\n  }\n} // function* deleteCategory(payload) {\n// \ttry {\n// \t\tconst isDeleted = yield call(sagaDeleteCategories, payload.id);\n// \t\tyield put(deleteCategorySuccess(isDeleted));\n// \t} catch (err) {\n// \t\tconsole.log(err);\n// \t}\n// }\n\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.GET_ALL_CUSTOMERS, getAllCustomers)]);\n  yield all([takeEvery(actionTypes.GET_SINGLE_MERCHANT, getSingleCusto)]);\n  yield all([takeEvery(actionTypes.UPGRADE_CUSTOMER, upgradeCustomer)]);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/customer/saga.js"],"names":["all","call","put","takeEvery","notification","actionTypes","actionGetAllCustomers","actionSuccessGetAllCustomers","axios","API","config","headers","Authorization","TOKEN","sagaFetchCustomers","url","MERCHANT_BASE_URL","data","get","then","response","customer","catch","err","console","log","sagaFetchSingleMerchant","merchant_id","merchant","sagaUpgradeCustomer","customer_id","BASE_URL","account_id","toString","post","getAllCustomers","Customers","getSingleCusto","actionSuccessGetSingleCusto","upgradeCustomer","payload","isUpgraded","actionUpgradeCustomerSuccess","rootSaga","GET_ALL_CUSTOMERS","GET_SINGLE_MERCHANT","UPGRADE_CUSTOMER"],"mappings":"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","sourcesContent":["\r\n\r\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { notification } from \"antd\";\r\n\r\nimport {\r\n\tactionTypes,\r\n\tactionGetAllCustomers,\r\n\tactionSuccessGetAllCustomers,\r\n} from \"./action\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../API/Api\";\r\n\r\n// NEW\r\n\r\nconst config = {\r\n\theaders: {\r\n\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t},\r\n};\r\n\r\n//FETCH ALL CUSTOMERS\r\nconst sagaFetchCustomers = async () => {\r\n\tconst url = API.MERCHANT_BASE_URL + \"/customer\";\r\n\r\n\tconst data = await axios\r\n\t\t.get(url, config)\r\n\t\t.then((response) => {\r\n\t\t\treturn response.data.customer;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err + \"fetching Customers\");\r\n\t\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n//FETCH SINGLE MERCHANT\r\nconst sagaFetchSingleMerchant = async (merchant_id) => {\r\n\tconst url = API.MERCHANT_BASE_URL + \"/merchant/\"+merchant_id;\r\n\r\n\tconst data = await axios\r\n\t\t.get(url, config)\r\n\t\t.then((response) => {\r\n\r\n\t\t\treturn response.data.merchant;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err + \"fetching single merchant\");\r\n\t\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n//UPGRADE CUSTOMER\r\nconst sagaUpgradeCustomer = async (customer_id)=>{\r\n\tconst url = API.BASE_URL + \"/customer/upgrade\"\r\n\tconst customer = {\r\n\t\taccount_id: customer_id.toString()\r\n\t  }\r\n\tconst data = await axios.post(url, customer, config).then((response)=>{\r\n\t\t\tconsole.log(response.data)\r\n\t\t\treturn response.data\r\n\t})\r\n\r\n\treturn data\r\n}\r\n\r\n// function* postCategory(payload) {\r\n// \ttry {\r\n// \t\tconst isCateAdded = yield call(sagaAddCategory, payload.category);\r\n// \t\tyield put(addCategorySuccess(isCateAdded));\r\n// \t} catch (err) {\r\n// \t\tconsole.log(err);\r\n// \t}\r\n// }\r\n\r\nfunction* getAllCustomers() {\r\n\ttry {\r\n\t\tconst Customers = yield call(sagaFetchCustomers);\r\n\t\tyield put(actionSuccessGetAllCustomers(Customers));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* getSingleCusto({merchant_id}) {\r\n\ttry {\r\n\t\tconst merchant = yield call(sagaFetchSingleMerchant, merchant_id);\r\n\t\tyield put(actionSuccessGetSingleCusto (merchant));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* upgradeCustomer(payload) {\r\n\ttry {\r\n\t\tconst isUpgraded = yield call(sagaUpgradeCustomer, payload.customer_id);\r\n\t\tyield put(actionUpgradeCustomerSuccess(isUpgraded));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n// function* deleteCategory(payload) {\r\n// \ttry {\r\n// \t\tconst isDeleted = yield call(sagaDeleteCategories, payload.id);\r\n// \t\tyield put(deleteCategorySuccess(isDeleted));\r\n// \t} catch (err) {\r\n// \t\tconsole.log(err);\r\n// \t}\r\n// }\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.GET_ALL_CUSTOMERS, getAllCustomers)]);\r\n\tyield all([takeEvery(actionTypes.GET_SINGLE_MERCHANT, getSingleCusto)]);\r\n\tyield all([takeEvery(actionTypes.UPGRADE_CUSTOMER, upgradeCustomer)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}