{"ast":null,"code":"// import { all, call, put, takeEvery } from \"redux-saga/effects\";\n// import { notification } from \"antd\";\n// import axios from \"axios\";\n// import { API } from \"../API/Api\";\n// import rootSaga from \"../rootSaga\";\n// import {\n// \tactionTypes,\n//       actionGetAllMechants,\n//       actionSuccessGetAllMechants\n// } from \"./action\";\n// const config = {\n//       headers: {\n//             Authorization: \"Bearer\" + API.TOKEN,\n//       },\n// };\n// const sagaFetchAllMerchant = async()=>{\n//       const url = API.ADMIN_BASE_URL + \"/merchant\";\n// \tconst data = await axios\n// \t\t.get(url, config)\n// \t\t.then((response) => {\n// \t\t\treturn response.data.merchant;\n// \t\t})\n// \t\t.catch((err) => {\n// \t\t\tconsole.log(err + \"fetching  merchants\");\n// \t\t});\n// \treturn data;\n// }\n// function* getAllMerchant(){\n//       try{\n//             const merchants = yield call(sagaFetchAllMerchant)\n//             yield put(actionSuccessGetAllMechants(merchants))\n//       }catch(err){\n//             console.log(err)\n//       }\n// }\n// export default function* rootSaga() {\n//       yield all([takeEvery(actionTypes.GET_ALL_MERCHANTS, getAllMerchant)]);\n// }\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { notification } from \"antd\";\nimport { actionTypes, actionGetAllMechants } from \"./action\";\nimport axios from \"axios\";\nimport { API } from \"../API/Api\"; // NEW\n//FETCH CATEGORIES\n\nconst sagaFetchCategories = async () => {\n  const url = API.ADMIN_BASE_URL + \"/category\";\n  const config = {\n    headers: {\n      Authorization: \"Bearer\" + API.TOKEN\n    }\n  };\n  const data = await axios.get(url, config).then(response => {\n    return response.data.category;\n  }).catch(err => {\n    console.log(err + \"fetching categories\");\n  });\n  return data;\n};\n\nfunction* postCategory(payload) {\n  try {\n    const isCateAdded = yield call(sagaAddCategory, payload.category);\n    yield put(addCategorySuccess(isCateAdded));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getCategory() {\n  try {\n    const categories = yield call(sagaFetchCategories);\n    yield put(fetchCategorySuccess(categories));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* deleteCategory(payload) {\n  try {\n    const isDeleted = yield call(sagaDeleteCategories, payload.id);\n    yield put(deleteCategorySuccess(isDeleted));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.CATEGORY_POST, postCategory)]);\n  yield all([takeEvery(actionTypes.CATEGORY_GET, getCategory)]);\n  yield all([takeEvery(actionTypes.CATEGORY_DELETE, deleteCategory)]); // yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/merchant/saga.js"],"names":["all","call","put","takeEvery","notification","actionTypes","actionGetAllMechants","axios","API","sagaFetchCategories","url","ADMIN_BASE_URL","config","headers","Authorization","TOKEN","data","get","then","response","category","catch","err","console","log","postCategory","payload","isCateAdded","sagaAddCategory","addCategorySuccess","getCategory","categories","fetchCategorySuccess","deleteCategory","isDeleted","sagaDeleteCategories","id","deleteCategorySuccess","rootSaga","CATEGORY_POST","CATEGORY_GET","CATEGORY_DELETE"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAIA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAASC,YAAT,QAA6B,MAA7B;AAEA,SACCC,WADD,EAECC,oBAFD,QAGO,UAHP;AAIA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,YAApB,C,CAEA;AAGA;;AACA,MAAMC,mBAAmB,GAAG,YAAY;AACvC,QAAMC,GAAG,GAAGF,GAAG,CAACG,QAAJ,GAAe,WAA3B;AACA,QAAMC,MAAM,GAAG;AACdC,IAAAA,OAAO,EAAE;AACRC,MAAAA,aAAa,EAAE,WAAWN,GAAG,CAACO;AADtB;AADK,GAAf;AAMA,QAAMC,IAAI,GAAG,MAAMT,KAAK,CACtBU,GADiB,CACbP,GADa,EACRE,MADQ,EAEjBM,IAFiB,CAEXC,QAAD,IAAc;AACnB,WAAOA,QAAQ,CAACH,IAAT,CAAcI,QAArB;AACA,GAJiB,EAKjBC,KALiB,CAKVC,GAAD,IAAS;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,GAAG,qBAAlB;AACA,GAPiB,CAAnB;AASA,SAAON,IAAP;AACA,CAlBD;;AAsBA,UAAUS,YAAV,CAAuBC,OAAvB,EAAgC;AAC/B,MAAI;AACH,UAAMC,WAAW,GAAG,MAAM1B,IAAI,CAAC2B,eAAD,EAAkBF,OAAO,CAACN,QAA1B,CAA9B;AACA,UAAMlB,GAAG,CAAC2B,kBAAkB,CAACF,WAAD,CAAnB,CAAT;AACA,GAHD,CAGE,OAAOL,GAAP,EAAY;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA;AACD;;AAED,UAAUQ,WAAV,GAAwB;AACvB,MAAI;AACH,UAAMC,UAAU,GAAG,MAAM9B,IAAI,CAACQ,mBAAD,CAA7B;AACA,UAAMP,GAAG,CAAC8B,oBAAoB,CAACD,UAAD,CAArB,CAAT;AACA,GAHD,CAGE,OAAOT,GAAP,EAAY;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA;AACD;;AAED,UAAUW,cAAV,CAAyBP,OAAzB,EAAkC;AACjC,MAAI;AACH,UAAMQ,SAAS,GAAG,MAAMjC,IAAI,CAACkC,oBAAD,EAAuBT,OAAO,CAACU,EAA/B,CAA5B;AACA,UAAMlC,GAAG,CAACmC,qBAAqB,CAACH,SAAD,CAAtB,CAAT;AACA,GAHD,CAGE,OAAOZ,GAAP,EAAY;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA;AACD;;AAED,eAAe,UAAUgB,QAAV,GAAqB;AACnC,QAAMtC,GAAG,CAAC,CAACG,SAAS,CAACE,WAAW,CAACkC,aAAb,EAA4Bd,YAA5B,CAAV,CAAD,CAAT;AACA,QAAMzB,GAAG,CAAC,CAACG,SAAS,CAACE,WAAW,CAACmC,YAAb,EAA2BV,WAA3B,CAAV,CAAD,CAAT;AACA,QAAM9B,GAAG,CAAC,CAACG,SAAS,CAACE,WAAW,CAACoC,eAAb,EAA8BR,cAA9B,CAAV,CAAD,CAAT,CAHmC,CAInC;AACA","sourcesContent":["// import { all, call, put, takeEvery } from \"redux-saga/effects\";\r\n// import { notification } from \"antd\";\r\n// import axios from \"axios\";\r\n// import { API } from \"../API/Api\";\r\n// import rootSaga from \"../rootSaga\";\r\n// import {\r\n// \tactionTypes,\r\n//       actionGetAllMechants,\r\n//       actionSuccessGetAllMechants\r\n// } from \"./action\";\r\n\r\n// const config = {\r\n//       headers: {\r\n//             Authorization: \"Bearer\" + API.TOKEN,\r\n//       },\r\n// };\r\n\r\n// const sagaFetchAllMerchant = async()=>{\r\n\r\n//       const url = API.ADMIN_BASE_URL + \"/merchant\";\r\n\t\r\n\r\n// \tconst data = await axios\r\n// \t\t.get(url, config)\r\n// \t\t.then((response) => {\r\n// \t\t\treturn response.data.merchant;\r\n// \t\t})\r\n// \t\t.catch((err) => {\r\n// \t\t\tconsole.log(err + \"fetching  merchants\");\r\n// \t\t});\r\n\r\n// \treturn data;\r\n// }\r\n\r\n\r\n// function* getAllMerchant(){\r\n//       try{\r\n\r\n//             const merchants = yield call(sagaFetchAllMerchant)\r\n//             yield put(actionSuccessGetAllMechants(merchants))\r\n//       }catch(err){\r\n//             console.log(err)\r\n//       }\r\n\r\n// }\r\n\r\n \r\n// export default function* rootSaga() {\r\n//       yield all([takeEvery(actionTypes.GET_ALL_MERCHANTS, getAllMerchant)]);\r\n\r\n// }\r\n\r\n\r\n\r\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { notification } from \"antd\";\r\n\r\nimport {\r\n\tactionTypes,\r\n\tactionGetAllMechants,\r\n} from \"./action\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../API/Api\";\r\n\r\n// NEW\r\n\r\n\r\n//FETCH CATEGORIES\r\nconst sagaFetchCategories = async () => {\r\n\tconst url = API.ADMIN_BASE_URL + \"/category\";\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\r\n\tconst data = await axios\r\n\t\t.get(url, config)\r\n\t\t.then((response) => {\r\n\t\t\treturn response.data.category;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err + \"fetching categories\");\r\n\t\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n\r\n\r\nfunction* postCategory(payload) {\r\n\ttry {\r\n\t\tconst isCateAdded = yield call(sagaAddCategory, payload.category);\r\n\t\tyield put(addCategorySuccess(isCateAdded));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* getCategory() {\r\n\ttry {\r\n\t\tconst categories = yield call(sagaFetchCategories);\r\n\t\tyield put(fetchCategorySuccess(categories));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* deleteCategory(payload) {\r\n\ttry {\r\n\t\tconst isDeleted = yield call(sagaDeleteCategories, payload.id);\r\n\t\tyield put(deleteCategorySuccess(isDeleted));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.CATEGORY_POST, postCategory)]);\r\n\tyield all([takeEvery(actionTypes.CATEGORY_GET, getCategory)]);\r\n\tyield all([takeEvery(actionTypes.CATEGORY_DELETE, deleteCategory)]);\r\n\t// yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}