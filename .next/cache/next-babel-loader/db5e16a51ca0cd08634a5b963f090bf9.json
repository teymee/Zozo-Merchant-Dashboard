{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getAllMerchant);\n\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { notification } from \"antd\";\nimport axios from \"axios\";\nimport { API } from \"../API/Api\";\nimport rootSaga from \"../rootSaga\";\nimport { actionTypes, actionGetAllMechants, actionSuccessGetAllMechants } from \"./action\";\nvar config = {\n  headers: {\n    Authorization: \"Bearer\" + API.TOKEN\n  }\n};\n\nvar sagaFetchAllMerchant = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var url, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = API.MERCHANT_BASE_URL + \"/merchant\";\n            _context.next = 3;\n            return axios.get(url, config).then(function (response) {\n              return response.data.merchant;\n            })[\"catch\"](function (err) {\n              console.log(err + \"fetching  merchants\");\n            });\n\n          case 3:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function sagaFetchAllMerchant() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfunction getAllMerchant() {\n  var merchants;\n  return _regeneratorRuntime.wrap(function getAllMerchant$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(sagaFetchAllMerchant);\n\n        case 3:\n          merchants = _context2.sent;\n          _context2.next = 6;\n          return put(actionSuccessGetAllMechants(merchants));\n\n        case 6:\n          _context2.next = 11;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n} // export default funtion* rootSaga(){\n//       yield all([takeEvery(actionTypes.GET_ALL_MERCHANTS, getAllMerchant)]);\n// }     \n// export default function* rootSaga() {\n//       yield all([takeEvery(actionTypes.GET_ALL_MERCHANTS, getAllMerchant)]);\n// \t// yield all([takeEvery(actionTypes.CATEGORY_POST, postCategory)]);\n// \t// yield all([takeEvery(actionTypes.CATEGORY_GET, getCategory)]);\n// \t// yield all([takeEvery(actionTypes.CATEGORY_DELETE, deleteCategory)]);\n// \t// yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\n// }","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/store/merchant/saga.js"],"names":["getAllMerchant","all","call","put","takeEvery","notification","axios","API","rootSaga","actionTypes","actionGetAllMechants","actionSuccessGetAllMechants","config","headers","Authorization","TOKEN","sagaFetchAllMerchant","url","MERCHANT_BASE_URL","get","then","response","data","merchant","err","console","log","merchants"],"mappings":";;;oDAmCUA,c;;AAnCV,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAASC,YAAT,QAA6B,MAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SACCC,WADD,EAEMC,oBAFN,EAGMC,2BAHN,QAIO,UAJP;AAMA,IAAMC,MAAM,GAAG;AACTC,EAAAA,OAAO,EAAE;AACHC,IAAAA,aAAa,EAAE,WAAWP,GAAG,CAACQ;AAD3B;AADA,CAAf;;AAMA,IAAMC,oBAAoB;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAEjBC,YAAAA,GAFiB,GAEXV,GAAG,CAACW,QAAJ,GAAe,WAFJ;AAAA;AAAA,mBAKTZ,KAAK,CACtBa,GADiB,CACbF,GADa,EACRL,MADQ,EAEjBQ,IAFiB,CAEZ,UAACC,QAAD,EAAc;AACnB,qBAAOA,QAAQ,CAACC,IAAT,CAAcC,QAArB;AACA,aAJiB,WAKX,UAACC,GAAD,EAAS;AACfC,cAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,GAAG,qBAAlB;AACA,aAPiB,CALS;;AAAA;AAKtBF,YAAAA,IALsB;AAAA,6CAcrBA,IAdqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBN,oBAAoB;AAAA;AAAA;AAAA,GAA1B;;AAkBA,SAAUhB,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG8B,iBAAME,IAAI,CAACc,oBAAD,CAAV;;AAH9B;AAGkBW,UAAAA,SAHlB;AAAA;AAIY,iBAAMxB,GAAG,CAACQ,2BAA2B,CAACgB,SAAD,CAA5B,CAAT;;AAJZ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMYF,UAAAA,OAAO,CAACC,GAAR;;AANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { notification } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../API/Api\";\r\nimport rootSaga from \"../rootSaga\";\r\nimport {\r\n\tactionTypes,\r\n      actionGetAllMechants,\r\n      actionSuccessGetAllMechants\r\n} from \"./action\";\r\n\r\nconst config = {\r\n      headers: {\r\n            Authorization: \"Bearer\" + API.TOKEN,\r\n      },\r\n};\r\n\r\nconst sagaFetchAllMerchant = async()=>{\r\n\r\n      const url = API.MERCHANT_BASE_URL + \"/merchant\";\r\n\t\r\n\r\n\tconst data = await axios\r\n\t\t.get(url, config)\r\n\t\t.then((response) => {\r\n\t\t\treturn response.data.merchant;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err + \"fetching  merchants\");\r\n\t\t});\r\n\r\n\treturn data;\r\n}\r\n\r\n\r\nfunction* getAllMerchant (){\r\n      try{\r\n\r\n            const merchants = yield call(sagaFetchAllMerchant)\r\n            yield put(actionSuccessGetAllMechants(merchants))\r\n      }catch(err){\r\n            console.log(err)\r\n      }\r\n\r\n}\r\n\r\n// export default funtion* rootSaga(){\r\n//       yield all([takeEvery(actionTypes.GET_ALL_MERCHANTS, getAllMerchant)]);\r\n// }     \r\n// export default function* rootSaga() {\r\n//       yield all([takeEvery(actionTypes.GET_ALL_MERCHANTS, getAllMerchant)]);\r\n// \t// yield all([takeEvery(actionTypes.CATEGORY_POST, postCategory)]);\r\n// \t// yield all([takeEvery(actionTypes.CATEGORY_GET, getCategory)]);\r\n// \t// yield all([takeEvery(actionTypes.CATEGORY_DELETE, deleteCategory)]);\r\n// \t// yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}