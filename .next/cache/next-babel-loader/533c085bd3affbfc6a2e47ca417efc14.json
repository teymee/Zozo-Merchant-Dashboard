{"ast":null,"code":"import { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { notification } from \"antd\";\nimport { actionTypes, addProduct, addProductSuccess, fetchPRODUCTSuccess, deletePRODUCTSuccess, getMerchantProductSuccess, getProductDetailsSuccess } from \"./action\";\nimport axios from \"axios\";\nimport { API } from \"../API/Api\";\nconst config = {\n  headers: {\n    Authorization: \"Bearer\" + API.TOKEN\n  }\n};\n\nconst modalSuccess = type => {\n  notification[type]({\n    message: \"Successful\",\n    description: \"Product Added successful!\"\n  });\n};\n\nconst modalWarning = type => {\n  notification[type]({\n    message: \"Error\",\n    description: \"Error while creating a Product!\"\n  });\n};\n\nconst whoami = async () => {\n  const url = API.BASE_URL + \"/whoami\";\n  console.log(API.TOKEN);\n  console.log(\"API.TOKEN\");\n  const config = {\n    headers: {\n      Authorization: \"Bearer \" + API.TOKEN\n    }\n  };\n  const data = await axios.get(url, config).then(res => {\n    return res.data;\n  });\n  return data;\n}; // POST PRODUCT\n\n\nconst sagaAddProduct = async product => {\n  const user = await whoami(API.TOKEN);\n  const url = API.MERCHANT_BASE_URL + \"/product/add\";\n  product.merchant_id = user.merchant.id.toString();\n  console.log(product);\n  const data = await axios.post(url, product, config).then(response => {\n    console.log(\"saga add product\" + response);\n    return response.data.product.name;\n  });\n  return data;\n}; //GET SPECIFIC MERCHANT'S PRODUCT\n\n\nconst sagaGetMerchantProducts = async id => {\n  const user = await whoami(API.TOKEN);\n  const url = API.MERCHANT_MERCHANT_BASE_URL + \"/product/all/\" + user.merchant.id;\n  const config = {\n    headers: {\n      Authorization: \"Bearer\" + API.TOKEN\n    }\n  };\n  const data = await axios.get(url, config).then(response => {\n    return response.data.products;\n  });\n  return data;\n}; //GET  PRODUCT DETAILS\n\n\nconst sagaGetProductDetails = async id => {\n  const url = API.BASE_URL + \"/customer/product/\" + id;\n  const config = {\n    headers: {\n      Authorization: \"Bearer\" + API.TOKEN\n    }\n  };\n  const data = await axios.get(url, config).then(response => {\n    console.log(response.data);\n    return response.data.product;\n  });\n  return data;\n}; //SAGA FUNCTIONS\n\n\nfunction* postProduct(payload) {\n  try {\n    const isProductAdded = yield call(sagaAddProduct, payload.product);\n    yield put(addProductSuccess(isProductAdded));\n    modalSuccess(\"success\");\n  } catch (err) {\n    console.log(err + \"adding product saga\");\n  }\n}\n\nfunction* getMerchantProduct(payload) {\n  try {\n    const merchantProducts = yield call(sagaGetMerchantProducts, payload.id);\n    yield put(getMerchantProductSuccess(merchantProducts));\n  } catch (err) {\n    console.log(err + \"getting merchant product saga\"); // alert(err + \"getting merchant product saga\");\n  }\n}\n\nfunction* getProductDetails(payload) {\n  try {\n    console.log(\" saga product details\");\n    const product = yield call(sagaGetProductDetails, payload.id);\n    yield put(getProductDetailsSuccess(product));\n  } catch (err) {\n    console.log(err + \"product details saga\"); // alert(err + \"getting merchant product saga\");\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.PRODUCT_POST, postProduct)]);\n  yield all([takeEvery(actionTypes.MERCHANT_PRODUCT_GET, getMerchantProduct)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCT_DETAILS, getProductDetails)]); // yield all([takeEvery(actionTypes.PRODUCT_DELETE, deletePRODUCT)]);\n  // yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/Merchant dashboard/merchant dashboard/store/product/saga.js"],"names":["all","call","put","takeEvery","notification","actionTypes","addProduct","addProductSuccess","fetchPRODUCTSuccess","deletePRODUCTSuccess","getMerchantProductSuccess","getProductDetailsSuccess","axios","API","config","headers","Authorization","TOKEN","modalSuccess","type","message","description","modalWarning","whoami","url","BASE_URL","console","log","data","get","then","res","sagaAddProduct","product","user","MERCHANT_BASE_URL","merchant_id","merchant","id","toString","post","response","name","sagaGetMerchantProducts","MERCHANT_MERCHANT_BASE_URL","products","sagaGetProductDetails","postProduct","payload","isProductAdded","err","getMerchantProduct","merchantProducts","getProductDetails","rootSaga","PRODUCT_POST","MERCHANT_PRODUCT_GET","GET_PRODUCT_DETAILS"],"mappings":"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","sourcesContent":["import { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { notification } from \"antd\";\r\n\r\nimport {\r\n\tactionTypes,\r\n\taddProduct,\r\n\taddProductSuccess,\r\n\tfetchPRODUCTSuccess,\r\n\tdeletePRODUCTSuccess,\r\n\tgetMerchantProductSuccess,\r\n\tgetProductDetailsSuccess,\r\n} from \"./action\";\r\nimport axios from \"axios\";\r\nimport { API } from \"../API/Api\";\r\n\r\nconst config = {\r\n\theaders: {\r\n\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t},\r\n};\r\nconst modalSuccess = (type) => {\r\n\tnotification[type]({\r\n\t\tmessage: \"Successful\",\r\n\t\tdescription: \"Product Added successful!\",\r\n\t});\r\n};\r\n\r\nconst modalWarning = (type) => {\r\n\tnotification[type]({\r\n\t\tmessage: \"Error\",\r\n\t\tdescription: \"Error while creating a Product!\",\r\n\t});\r\n};\r\n\r\nconst whoami = async () => {\r\n\tconst url = API.BASE_URL + \"/whoami\";\r\n\tconsole.log(API.TOKEN);\r\n\tconsole.log(\"API.TOKEN\");\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\tconst data = await axios.get(url, config).then((res) => {\r\n\t\treturn res.data;\r\n\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n// POST PRODUCT\r\nconst sagaAddProduct = async (product) => {\r\n\tconst user = await whoami(API.TOKEN);\r\n\r\n\tconst url = API.MERCHANT_BASE_URL + \"/product/add\";\r\n\r\n\tproduct.merchant_id = user.merchant.id.toString();\r\n\tconsole.log(product)\r\n\tconst data = await axios.post(url, product, config).then((response) => {\r\n\t\tconsole.log(\"saga add product\" + response);\r\n\t\treturn response.data.product.name;\r\n\t});\r\n\treturn data;\r\n};\r\n\r\n//GET SPECIFIC MERCHANT'S PRODUCT\r\nconst sagaGetMerchantProducts = async (id) => {\r\n\tconst user = await whoami(API.TOKEN);\r\n\tconst url =\r\n\t\tAPI.MERCHANT_MERCHANT_BASE_URL + \"/product/all/\" + user.merchant.id;\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\r\n\tconst data = await axios.get(url, config).then((response) => {\r\n\t\treturn response.data.products;\r\n\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n//GET  PRODUCT DETAILS\r\nconst sagaGetProductDetails = async (id) => {\r\n\tconst url = API.BASE_URL + \"/customer/product/\" + id;\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer\" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\r\n\tconst data = await axios.get(url, config).then((response) => {\r\n\t\tconsole.log(response.data);\r\n\t\treturn response.data.product;\r\n\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n\r\n\r\n//SAGA FUNCTIONS\r\nfunction* postProduct(payload) {\r\n\ttry {\r\n\t\tconst isProductAdded = yield call(sagaAddProduct, payload.product);\r\n\t\tyield put(addProductSuccess(isProductAdded));\r\n\t\tmodalSuccess(\"success\");\r\n\t} catch (err) {\r\n\t\tconsole.log(err + \"adding product saga\");\r\n\t}\r\n}\r\n\r\nfunction* getMerchantProduct(payload) {\r\n\ttry {\r\n\t\tconst merchantProducts = yield call(sagaGetMerchantProducts, payload.id);\r\n\t\tyield put(getMerchantProductSuccess(merchantProducts));\r\n\t} catch (err) {\r\n\t\tconsole.log(err + \"getting merchant product saga\");\r\n\t\t// alert(err + \"getting merchant product saga\");\r\n\t}\r\n}\r\n\r\nfunction* getProductDetails(payload) {\r\n\ttry {\r\n\t\tconsole.log(\" saga product details\");\r\n\t\tconst product = yield call(sagaGetProductDetails, payload.id);\r\n\t\tyield put(getProductDetailsSuccess(product));\r\n\t} catch (err) {\r\n\t\tconsole.log(err + \"product details saga\");\r\n\t\t// alert(err + \"getting merchant product saga\");\r\n\t}\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.PRODUCT_POST, postProduct)]);\r\n\tyield all([takeEvery(actionTypes.MERCHANT_PRODUCT_GET, getMerchantProduct)]);\r\n\tyield all([takeEvery(actionTypes.GET_PRODUCT_DETAILS, getProductDetails)]);\r\n\t// yield all([takeEvery(actionTypes.PRODUCT_DELETE, deletePRODUCT)]);\r\n\t// yield all([takeEvery(actionTypes.LOGOUT, logOutSaga)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}