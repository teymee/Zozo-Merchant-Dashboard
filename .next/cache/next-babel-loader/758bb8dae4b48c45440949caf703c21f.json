{"ast":null,"code":"import axios from \"axios\";\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { API } from \"../API/Api\";\nimport { actionAdminFetchAuctionsSuccess, actionApproveEventSuccess, actionCreateBidEventSuccess, actionTypes } from \"./action\";\nconst config = {\n  headers: {\n    Authorization: \"Bearer \" + API.TOKEN\n  }\n};\n\nconst whoami = async () => {\n  const url = API.BASE_URL + \"/whoami\";\n  console.log(API.TOKEN);\n  const config = {\n    headers: {\n      Authorization: \"Bearer \" + API.TOKEN\n    }\n  };\n  const data = await axios.get(url, config).then(res => {\n    return res.data;\n  });\n  return data;\n}; //POST CREAT BID EVENT\n\n\nconst sagaCreateBidEvent = async event => {\n  console.log(\"saga func\");\n  const url = API.MERCHANT_MERCHANT_BASE_URL + \"/bidding\";\n  const config = {\n    headers: {\n      Authorization: \"Bearer \" + API.TOKEN\n    }\n  };\n  const data = axios.post(url, event, config).then(response => {\n    console.log(response.data);\n    return response.data;\n  });\n  return data;\n}; //GET MERCHANT BIDDING EVENT\n\n\nconst sagaAdminFetchBidEvent = async status => {\n  let data;\n\n  if (status === \"pending\") {\n    const url = API.MERCHANT_BASE_URL + \"/bidding\";\n    console.log(status);\n    data = axios.get(url, config).then(response => {\n      const pendingBids = response.data.bidding_event.filter(bid => {\n        return bid.approved === false;\n      });\n      return pendingBids;\n    });\n  } else if (status === \"approved\") {\n    const url = API.MERCHANT_BASE_URL + \"/bidding\";\n    console.log(status);\n    data = axios.get(url, config).then(response => {\n      console.log(response.data.bidding_event);\n      const approvedBids = response.data.bidding_event.filter(bid => {\n        return bid.approved === true;\n      });\n      return approvedBids;\n    });\n  } else {\n    const url = API.MERCHANT_BASE_URL + \"/bidding/status\";\n    const eventStatus = {\n      status\n    };\n    console.log(eventStatus);\n    data = axios.post(url, eventStatus, config).then(response => {\n      console.log(response.data);\n      return response.data.bidding_event;\n    });\n  }\n\n  return data;\n};\n\nconst sagaApproveBidEvent = async event_id => {\n  console.log(\"saga func\");\n  const url = API.MERCHANT_BASE_URL + \"/bidding/approve/\" + event_id;\n  const config = {\n    headers: {\n      Authorization: \"Bearer \" + API.TOKEN\n    }\n  };\n  console.log(url);\n  const data = axios.post(url, event_id, config).then(response => {\n    console.log(response.data);\n    return response.data;\n  });\n  return data;\n};\n\nfunction* createBidEvent(payload) {\n  try {\n    const isEventAdded = yield call(sagaCreateBidEvent, payload.event);\n    yield put(actionCreateBidEventSuccess(isEventAdded));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* adminFetchBidEvent(payload) {\n  try {\n    const getAllBidEvent = yield call(sagaAdminFetchBidEvent, payload.status);\n    console.log(getAllBidEvent);\n    yield put(actionAdminFetchAuctionsSuccess(getAllBidEvent));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* approveBidEvent(payload) {\n  try {\n    const isApproved = yield call(sagaApproveBidEvent, payload.event_id);\n    console.log(isApproved);\n    yield put(actionApproveEventSuccess(isApproved));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.CREATE_BID_EVENT, createBidEvent)]);\n  yield all([takeEvery(actionTypes.ADMIN_FETCH_BID_EVENTS, adminFetchBidEvent)]);\n  yield all([takeEvery(actionTypes.APPROVE_BID_EVENT, approveBidEvent)]);\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/Merchant dashboard/merchant dashboard/store/bid/saga.js"],"names":["axios","all","call","put","takeEvery","API","actionAdminFetchAuctionsSuccess","actionApproveEventSuccess","actionCreateBidEventSuccess","actionTypes","config","headers","Authorization","TOKEN","whoami","url","BASE_URL","console","log","data","get","then","res","sagaCreateBidEvent","event","MERCHANT_MERCHANT_BASE_URL","post","response","sagaAdminFetchBidEvent","status","MERCHANT_BASE_URL","pendingBids","bidding_event","filter","bid","approved","approvedBids","eventStatus","sagaApproveBidEvent","event_id","createBidEvent","payload","isEventAdded","err","adminFetchBidEvent","getAllBidEvent","approveBidEvent","isApproved","rootSaga","CREATE_BID_EVENT","ADMIN_FETCH_BID_EVENTS","APPROVE_BID_EVENT"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { all, call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { API } from \"../API/Api\";\r\nimport {\r\n\tactionAdminFetchAuctionsSuccess,\r\n\tactionApproveEventSuccess,\r\n\tactionCreateBidEventSuccess,\r\n\tactionTypes,\r\n} from \"./action\";\r\n\r\nconst config = {\r\n\theaders: {\r\n\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t},\r\n};\r\n\r\nconst whoami = async () => {\r\n\tconst url = API.BASE_URL+\"/whoami\";\r\n\tconsole.log(API.TOKEN)\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\tconst data = await axios.get(url, config).then((res) => {\r\n\t\treturn res.data;\r\n\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n//POST CREAT BID EVENT\r\nconst sagaCreateBidEvent = async (event) => {\r\n\tconsole.log(\"saga func\");\r\n\tconst url = API.MERCHANT_MERCHANT_BASE_URL + \"/bidding\";\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\tconst data = axios.post(url, event, config).then((response) => {\r\n\t\tconsole.log(response.data);\r\n\t\treturn response.data;\r\n\t});\r\n\r\n\treturn data;\r\n};\r\n\r\n//GET MERCHANT BIDDING EVENT\r\nconst sagaAdminFetchBidEvent = async (status) => {\r\n\tlet data;\r\n\tif (status === \"pending\") {\r\n\t\tconst url = API.MERCHANT_BASE_URL + \"/bidding\";\r\n\r\n\t\tconsole.log(status);\r\n\t\tdata = axios.get(url, config).then((response) => {\r\n\t\t\tconst pendingBids = response.data.bidding_event.filter((bid) => {\r\n\t\t\t\treturn bid.approved === false;\r\n\t\t\t});\r\n\t\t\treturn pendingBids;\r\n\t\t});\r\n\t} else if (status === \"approved\") {\r\n\t\tconst url = API.MERCHANT_BASE_URL + \"/bidding\";\r\n\r\n\t\tconsole.log(status);\r\n\t\tdata = axios.get(url, config).then((response) => {\r\n\t\t\tconsole.log(response.data.bidding_event)\r\n\t\t\tconst approvedBids = response.data.bidding_event.filter((bid) => {\r\n\t\t\t\treturn bid.approved === true;\r\n\t\t\t});\r\n\t\t\treturn approvedBids;\r\n\t\t});\r\n\t} else {\r\n\t\tconst url = API.MERCHANT_BASE_URL + \"/bidding/status\";\r\n\r\n\t\tconst eventStatus = {\r\n\t\t\tstatus,\t\r\n\t\t};\r\n\r\n\t\tconsole.log(eventStatus);\r\n\t\tdata = axios.post(url, eventStatus, config).then((response) => {\r\n\t\t\tconsole.log(response.data);\r\n\t\t\treturn response.data.bidding_event;\r\n\t\t});\r\n\t}\r\n\r\n\treturn data;\r\n};\r\n\r\nconst sagaApproveBidEvent = async (event_id) => {\r\n\tconsole.log(\"saga func\");\r\n\tconst url = API.MERCHANT_BASE_URL + \"/bidding/approve/\" + event_id;\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t\t},\r\n\t};\r\n\tconsole.log(url);\r\n\tconst data = axios.post(url, event_id, config).then((response) => {\r\n\t\tconsole.log(response.data);\r\n\t\treturn response.data;\r\n\t});\r\n\r\n\treturn data;\r\n};\r\n\r\nfunction* createBidEvent(payload) {\r\n\ttry {\r\n\t\tconst isEventAdded = yield call(sagaCreateBidEvent, payload.event);\r\n\t\tyield put(actionCreateBidEventSuccess(isEventAdded));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* adminFetchBidEvent(payload) {\r\n\ttry {\r\n\t\tconst getAllBidEvent = yield call(sagaAdminFetchBidEvent, payload.status);\r\n\t\tconsole.log(getAllBidEvent)\r\n\t\tyield put(actionAdminFetchAuctionsSuccess(getAllBidEvent));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nfunction* approveBidEvent(payload) {\r\n\ttry {\r\n\t\tconst isApproved = yield call(sagaApproveBidEvent, payload.event_id);\r\n\t\tconsole.log(isApproved);\r\n\t\tyield put(actionApproveEventSuccess(isApproved));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([takeEvery(actionTypes.CREATE_BID_EVENT, createBidEvent)]);\r\n\tyield all([\r\n\t\ttakeEvery(actionTypes.ADMIN_FETCH_BID_EVENTS, adminFetchBidEvent),\r\n\t]);\r\n\tyield all([takeEvery(actionTypes.APPROVE_BID_EVENT, approveBidEvent)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}